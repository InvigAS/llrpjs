<?xml version="1.0" encoding="UTF-8"?>
<!--
 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 - Copyright 2010 Motorola, Inc.
 - 
 - Part of this work is derived from LLRP Toolkit project (http://toolkit.llrp.org/)
 - distributed under Apache License, Version 2.0
 - Following is copyright for the original work.
 - 
 - Copyright 2007 Impinj, Inc.
 -
 -  Copyright 2006, 2007 EPCglobal Inc.
 -     (The proprietary text of EPCglobal Inc. included herein is not
 -      a Contribution to the work. The right to use the proprietary
 -      text is limited to reproduction and display thereof within
 -      the work.)

 -  Licensed under the Apache License, Version 2.0 (the "License");
 -  you may not use this file except in compliance with the License.
 -  You may obtain a copy of the License at
 -
 -      http://www.apache.org/licenses/LICENSE-2.0
 -
 -  Unless required by applicable law or agreed to in writing, software
 -  distributed under the License is distributed on an "AS IS" BASIS,
 -  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 -  See the License for the specific language governing permissions and
 -  limitations under the License.
 -
 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 -->

<llrpdef
		xmlns="http://www.llrp.org/ltk/schema/core/encoding/binary/1.0"
		xmlns:llrp="http://www.llrp.org/ltk/schema/core/encoding/binary/1.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:h="http://www.w3.org/1999/xhtml"
        xsi:schemaLocation="http://www.llrp.org/ltk/schema/core/encoding/binary/1.0
		    http://www.llrp.org/ltk/schema/core/encoding/binary/1.0/llrpdef.xsd">

  <vendorDefinition       name="moto" vendorID="161" />
  <namespaceDefinition    prefix="moto"
    URI="http://www.motorola.com/RFID/Readers/LLRP/1.0.1"
                          schemaLocation="http://www.motorola.com/RFID/Readers/LLRP/1.0.1/moto.xsd" />

  <!-- This parameter is used to request capabilities -->
  <customParameterDefinition      name="MotoGeneralRequestCapabilities"
                                  vendor="moto" subtype="50"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter can be optionally sent by the client to the reader as part of a GET_READER_CAPABILITIES message.
          It is used to select custom capabilities that need to be reported by the reader in the corresponding GET_READER_CAPABILITIES_ RESPONSE message. General capabilities currently includes capabilities of reader to operate in autonomous mode, additional filtering capability based on time or RSSI, and capability to save reader configuration, tag data and events over LLRP.
        </intro>
        <field name="RequestedData" description="Specifies capabilities to be reported."/>
      </documentation>
      <description copyright="Copyright 2008, Motorola Inc. The proprietary text of Motorola Inc. included here is in not a Contribution to the LLRP toolkit, under Apache License, Version 2.0. The right to use the proprietary text is limited to reproduction and display thereof within the work.">
        <h:p>Allowed in GET_READER_CAPABILITIES to request specific capabilities</h:p>
      </description>
    </annotation>
    <field        type="u8"       name="RequestedData"
                                  enumeration="MotoGeneralRequestCapabilitiesRequestedData"/>
    <allowedIn    type="GET_READER_CAPABILITIES"        repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for General params-->
  <customEnumerationDefinition    name="MotoGeneralRequestCapabilitiesRequestedData"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies requested data</intro>
        <enum Value="0" Definition="All"/>
        <enum Value="1" Definition="General capabilities"/>
        <enum Value="2" Definition="Autonomous mode capabilities"/>
        <enum Value="3" Definition="Tag events generation capabilities"/>
        <enum Value="4" Definition="Filtering capabilities"/>
        <enum Value="5" Definition="Persistence capabilities"/>
        <enum Value="6" Definition="C1G2 v1.2 capabilities"/>
        <enum Value="7" Definition="Tag locating capabilities"/>
        <enum Value="8" Definition="Radio Duty Cycle Capabilities"/>
        <enum Value="9" Definition="Versions Capabilities"/>
        <enum Value="10" Definition="Advanced Capabilities"/>
        <enum Value="11" Definition="Maximum of Capabilities. Always add a new capability above this and increment the number of Max_Custom_Capabilities"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="All"/>
    <entry     value="1"        name="General_Capabilities"/>
    <entry     value="2"        name="Autonomous_Mode_Capabilities"/>
    <entry     value="3"        name="Tag_Events_Generation_Capabilities"/>
    <entry     value="4"        name="Filtering_Capabilities"/>
    <entry     value="5"        name="Persistence_Capabilities"/>
    <entry     value="6"        name="C1G2_Capabilities"/>
    <entry     value="7"        name="Tag_Locating_Capabilities"/>
    <entry     value="8"        name="Radio_DutyCycle_Capabilities"/>
    <entry     value="9"        name="Versions_Capabilities"/>
    <entry     value="10"       name="Advanced_Capabilities"/>
    <entry     value="11"       name="Max_Custom_Capabilities"/>
  </customEnumerationDefinition>

  <!-- General Capability parameter -->
  <customParameterDefinition      name="MotoGeneralCapabilities"
                                  vendor="moto" subtype="1"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter extends reader capabilities to report custom capabilities supported by Motorola readers. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of General Capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
          The general capabilities indicate if the reader can report radio version, part number, and the if reader supports the <a href="#MotoGeneralGetParams">MotoGeneralGetParams </a>parameter.
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanGetGeneralParams" abbreviatedName="G" expandedName="Can report general custom parameter"
             description="If true, reader is capable of returning MotoGeneralGetParams if it is requested in GET_READER_CONFIG message."/>
        <field name="CanReportPartNumber" abbreviatedName="P" expandedName="Can report reader hardware part number"
             description="If true, reader is capable of reporting its part number."/>
        <field name="CanReportRadioVersion" abbreviatedName="R" expandedName="Can report radio version"
             description="If true, reader is capable of reporting its radio version information."/>
        <field name="CanSupportRadioPowerState" abbreviatedName="P" expandedName="Can support radio power state"
             description="If true, reader is capable of reporting if radio module is on or off, and the radio state can also be controlled."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanGetGeneralParams"/>
    <field        type="u1"       name="CanReportPartNumber"/>
    <field        type="u1"       name="CanReportRadioVersion"/>
    <field        type="u1"       name="CanSupportRadioPowerState"/>
    <reserved     bitCount="4"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Extensions for Autonomous capability parameters -->
  <customParameterDefinition      name="MotoAutonomousCapabilities"
                                  vendor="moto" subtype="100"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to operate in autonomous mode. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Autonomous mode capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
          In autonomous mode, reader continuously operates without requiring intervention from client to re-initiate an operation.
          Autonomous mode and associated tag reporting is useful for continuous inventory, but it could be extended for access operations.
          For efficiency reasons, this mode can be configured to report tag report when state of visibility of tag changes during the course of repeated inventory,
          rather than reporting the same tag data continuously. Refer <a href="#MotoTagEventsGenerationCapabilities">MotoTagEventsGenerationCapabilities</a> on reader's
          support for event reporting, <a href="#MotoTagEventSelector">MotoTagEventSelector</a> and <a href="#MotoTagReportMode">MotoTagReportMode</a> for
          configuring reporting criteria, and <a href="#MotoDefaultSpec">MotoDefaultSpec</a> and <a href="#MotoAutonomousState">MotoAutonomousState</a> for configuring
          and controlling autonomous mode.
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanSupportAutonomousMode" abbreviatedName="A" expandedName="Can support autonomous mode"
             description="If true, reader is capable of autonomous mode of operations"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanSupportAutonomousMode"/>
    <reserved     bitCount="7"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Extensions for Tag event reporting capability parameters -->
  <customParameterDefinition      name="MotoTagEventsGenerationCapabilities"
                                  vendor="moto" subtype="120"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to report tag's visibility state changes. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Tag events generation capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
          This capability makes autonomous mode of operation more efficient by reporting only event state changes rather than the tag report continuously.
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanSelectTagEvents" abbreviatedName="E" expandedName="Can select event type to be monitored and reported"
             description="If true, client can choose which all tag event state changes need to be monitored and reported. Event state can be one of 'New Tag', 'Tag Invisible' or 'Tag Visibility Changed'"/>
        <field name="CanSelectTagReportingFormat" abbreviatedName="F" expandedName="Can select reporting format"
             description="If true, client can choose what needs to be reported when an event generation criteria happens. Reporting format can be one of 'No Reporting', 'Report a notification message' or 'Report events with the tag report'"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanSelectTagEvents"/>
    <field        type="u1"       name="CanSelectTagReportingFormat"/>
    <reserved     bitCount="6"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Extensions for Tag locating capability parameters -->
  <customParameterDefinition      name="MotoLocationCapabilities"
                                  vendor="moto" subtype="130"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to locate specific tags. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Tag Locating capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanSupportMotoFindItem" abbreviatedName="F" expandedName="Can support Find specific item"
             description="If true, client can locate an item with specific tag identified by the EPC ID"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanSupportMotoFindItem"/>
  <field        type="u1"       name="CanSupportMotoPortalDirectionality"/>
  <reserved     bitCount="6"/>
    <reserved     bitCount="32"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Extensions to LLRP capability parameters -->
  <customParameterDefinition      name="MotoFilterCapabilities"
                                  vendor="moto" subtype="200"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to filter tag's based on tag's RSSI, time of day when tag was read or based on UTC Timestamp when tag was read. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is reported from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Filtering capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanFilterTagsBasedOnRSSI" abbreviatedName="R" expandedName="Can filter tags based on RSSI"
             description="If true, client can setup filter on the reader for reporting tags based on the signal strength of the back-scattered signal from the tag"/>
        <field name="CanFilterTagsBasedOnTimeOfDay" abbreviatedName="D" expandedName="Can filter tags based on time of the day"
             description="If true, client can setup filter on the reader for reporting tags based on time of the day (based on 24 hour clock time, with micro seconds resolution) when the tag was read by the reader"/>
        <field name="CanFilterTagsBasedOnUTCTimeStamp" abbreviatedName="U" expandedName="Can filter tags based on UTC Timestamp when the tag read occurred"
             description="If true, client can setup filter on the reader for reporting tags based on UTC Timestamp (with micro seconds resolution) when the tag was read by the reader"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanFilterTagsBasedOnRSSI"/>
    <field        type="u1"       name="CanFilterTagsBasedOnTimeOfDay"/>
    <field        type="u1"       name="CanFilterTagsBasedOnUTCTimeStamp"/>
    <reserved     bitCount="5"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Persistence Capability parameter -->
  <customParameterDefinition      name="MotoPersistenceCapabilities"
                                  vendor="moto" subtype="300"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to save configuration, save tag and associated event information. Saved information would be retained across reader reboots. <br/>
          This capability is reported from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Persistence capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanSaveConfiguration" abbreviatedName="C" expandedName="Can save reader configuration"
             description="If true, reader is capable of saving configurations across reboots"/>
        <field name="CanSaveTags" abbreviatedName="T" expandedName="Can save read tags"
             description="If true, reader is capable of saving tags across reboots. Note only tags that are not yet reported and those generated as a result of autonomous mode of operation can be configured to be saved for future reporting."/>
        <field name="CanSaveEvents" abbreviatedName="E" expandedName="Can save events associated with tags"
             description="If true, reader is capable of saving events associated with tags across reboots. Note only tags generated as a result of autonomous mode of operation can have events associated with it and such events can be saved for future reporting."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanSaveConfiguration"/>
    <field        type="u1"       name="CanSaveTags"/>
    <field        type="u1"       name="CanSaveEvents"/>
    <reserved     bitCount="5"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Extension to General Capability as Advanced Capabilities parameter -->
  <customParameterDefinition      name="MotoAdvancedCapabilities"
                                  vendor="moto" subtype="110"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter extends reader capabilities to report custom advanced capabilities supported by Motorola readers. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of General Capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
          The advanced capabilities indicate if the reader can support phase,zone, Antenna rf config etc.
        </intro>
        <field name="Version" description="Version of custom capability"/>
        <field name="CanReportPhase" abbreviatedName="S" expandedName="Can report Phase as part of the tag data"
             description="If true, reader is capable of reporting phase information along with the tag data if the same is enabled."/>
        <field name="CanSupportZone" abbreviatedName="Z" expandedName="Can support zone configuration and operation"
             description="If true, reader is capable of configuring zones and supporting zone based operations."/>
        <field name="CanSupportAntennaRFConfig" abbreviatedName="A" expandedName="Can support RF Config extensions for Antenna"
             description="If true, reader is capable of configuring the RF Config extensions such as Stop condition for antenna, SL_All, AB Flip and physical port configuration."/>
        <field name="CanSupportPeriodicTagReports" abbreviatedName="P" expandedName="Can Support Periodic Tag Report"
             description="If true, the reader supports periodic reporting of tags where the reader can be configured to report tags first time it is seen and then periodically based on configured period wherein the reader reports the tag if it is being still read after the period"/>
        <field name="CanSupportSledBatteryStatus" abbreviatedName="B" expandedName="Can support Sled battery status"
             description="If true, reader is capable of reporting Sled battery status as battery level and battery state."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanReportPhase"/>
    <field        type="u1"       name="CanSupportZone"/>
    <field        type="u1"       name="CanSupportAntennaRFConfig"/>
    <field        type="u1"       name="CanSupportPeriodicTagReports"/>    
    <field        type="u1"       name="CanSupportSledBatteryStatus"/>    
    <reserved     bitCount="3"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>


  <!-- This parameter is used to request current configured values for custom parameters -->
  <customParameterDefinition      name="MotoGeneralGetParams"
                                  vendor="moto" subtype="51"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter can be sent by the client to reader as part of GET_READER_CONFIG message to retrieve custom LLRP configurations on the reader.
        </intro>
        <field name="RequestedData" description="Specifies custom parameters to be reported"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u8"       name="RequestedData"
                                  enumeration="MotoGeneralGetParamsRequestedData"/>
    <allowedIn    type="GET_READER_CONFIG"        repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for General params-->
  <customEnumerationDefinition    name="MotoGeneralGetParamsRequestedData"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies requested data for getting  general parameters</intro>
        <enum Value="0" Definition="All"/>
        <enum Value="1" Definition="Autonomous mode state"/>
        <enum Value="2" Definition="Filter list"/>
        <enum Value="3" Definition="Persistency parameters"/>
        <enum Value="4" Definition="Default spec for autonomous mode"/>
        <enum Value="5" Definition="Radio power state"/>
        <enum Value="6" Definition="Radio Duty Cycle"/>
		<enum Value="7" Definition="Custom command options state"/>
		<enum Value="8" Definition="Portal Directionality Configuration"/>
		<enum Value="9" Definition="Sled Battery Status"/>
		<enum Value="10" Definition="USB Host parameters"/>
		<enum Value="11" Definition="Max enumeration in this parameter. Always add new type above this, and increment the number for MotoMaxCustomConfig"/>
    </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="All"/>
    <entry     value="1"        name="MotoAutonomousState"/>
    <entry     value="2"        name="MotoFilterList"/>
    <entry     value="3"        name="MotoPersistenceSaveParams"/>
    <entry     value="4"        name="MotoDefaultSpec"/>
    <entry     value="5"        name="MotoRadioPowerState"/>
    <entry     value="6"        name="MotoRadioDutyCycle"/>
	<entry     value="7"        name="MotoCustomCommandOptions"/>
	<entry     value="8"        name="MotoPortalDirectionalityConfiguration"/>
	<entry     value="9"        name="MotoSledBatteryStatus"/>  
	<entry     value="10"        name="MotoUSBHostParams"/>  
	<entry     value="11"        name="MotoMaxCustomConfig"/>
</customEnumerationDefinition>


  <!--  Custom message to get on demand tag event report -->
  <customMessageDefinition        name="MOTO_GET_TAG_EVENT_REPORT"
                                  vendor="moto" subtype="2"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader.
          It can be used to retrieve consolidated event information associated with each tag that has be read by the reader during autonomous read mode.<br/>
          During autonomous reader operation mode, events associated with read tags can be configured to be accumulated on the reader.
          If events that are not yet reported are associated with one or more tags know to the reader, an RO_ACCESS_REPORT message with multiple TagReportData,
          each having custom event list parameter, are sent from the reader to client as a response to this message.
          Event list associated with each tag is cleared by the reader once it sends a response to this message.
          But tags identification is still maintained in the reader unless explicitly purged using <a href="#MOTO_PURGE_TAGS">MOTO_PURGE_TAGS</a> message.
        </intro>
      </documentation>
      <description copyright="">
        <h:p>This can be issued by the client to the reader to retrieve event information from event consolidator. This report does not take any parameter (such as ROSpecID) as this message is intended to retrieve current event state change of all tags in event consolidator which is updated by the execution of any ROSpec</h:p>
      </description>
    </annotation>
  </customMessageDefinition>

  <!--  Custom message to purge tag data and events -->
  <customMessageDefinition        name="MOTO_PURGE_TAGS"
                                  vendor="moto" subtype="3"
                                  namespace="moto"
                                  responseType="MOTO_PURGE_TAGS_RESPONSE">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader. It is used to purge tags from the tag database in the reader.
          It can optionally purge only events associated with tags. <br/>If PurgeTagEventStateOnly is set to false, all tags matching those in list of &lt;EPCData&gt; parameter are cleared from the reader database. Event list associated with the tag also are cleared in this process.
          If PurgeTagEventStateOnly is set to true, only the event list, associated with tags matching list of tags specified in list of &lt;EPCData&gt; parameter, is cleared.
          If list of &lt;EPCData&gt; is empty or not specified, all tags or their associated event list gets purged, depending on whether PurgeTagEventStateOnly is set to false or true respectively.
        </intro>
        <field name="PurgeTagEventStateOnly" abbreviatedName="P" expandedName="Purge event list only" description="If true, only event list associated with the tag is purged. If false, tag (as well as events associated) is purged."/>
        <param type="EPCData" description="Each EPCData parameter specifies EPC ID of tag to be matched and selected for purge operation. Refer LLRP specification for definition of EPCData."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u1"       name="PurgeTagEventStateOnly"/>
    <reserved     bitCount="7"/>
    <parameter    repeat="0-N"    type="EPCData"/>
  </customMessageDefinition>

  <!--  Response message for MOTO_PURGE_TAGS message -->
  <customMessageDefinition        name="MOTO_PURGE_TAGS_RESPONSE"
                                  vendor="moto" subtype="4"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_PURGE_TAGS">MOTO_PURGE_TAGS</a> message.
          This message indicates status of purging tag and/or events
        </intro>
        <param type="LLRPStatus" description="Status of operation."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <parameter repeat="1"   type="LLRPStatus"/>
  </customMessageDefinition>

  <!--  Custom message to for indication of event change on the reader -->
  <customMessageDefinition        name="MOTO_TAG_EVENT_NOTIFY"
                                  vendor="moto" subtype="5"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client to notify an occurrence of visibility event change for one or more tags. <br/>
          This message is generated when notification for event change is set to 'Report Notifications' using <a href="#MotoTagReportMode">MotoTagReportMode</a> parameter.
        </intro>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
  </customMessageDefinition>


  <!--  csh. Begin:.........................................................  -->
  <!--  Ozone specific llrp schema implemenation                              -->

  <!--  csh. bumped off subtype. To start the Ozone specific messages from 10 -->
  <!--  Custom message to indicate radio firmware  file upload -->
  <customMessageDefinition        name="MOTO_UPDATE_RADIO_FIRMWARE"
                                  vendor="moto" subtype="10"
                                  namespace="moto"
                                  responseType="MOTO_UPDATE_RADIO_FIRMWARE_RESPONSE">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader.
          This message initiates the radio firmware upgrade according to the file specified in the path.
        </intro>
        <field name="FirmwareFilePath" description="Path where the firmware file is present"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="utf8v"       name="FirmwareFilePath" format="UTF8"/>
  </customMessageDefinition>

  <!--  Response message for MOTO_UPDATE_RADIO_FIRMWARE_RESPONSE message    -->
  <customMessageDefinition        name="MOTO_UPDATE_RADIO_FIRMWARE_RESPONSE"
                                  vendor="moto" subtype="11"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_UPDATE_RADIO_FIRMWARE">MOTO_UPDATE_RADIO_FIRMWARE</a> message.
          This message indicates status of the firmware update.
        </intro>
        <param type="LLRPStatus" description="Status of operation."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter repeat="1"   type="LLRPStatus"/>
  </customMessageDefinition>

  <!--  Custom message to indicate radio config file update -->
  <customMessageDefinition        name="MOTO_UPDATE_RADIO_CONFIG"
                                  vendor="moto" subtype="12"
                                  namespace="moto"
                                  responseType="MOTO_UPDATE_RADIO_CONFIG_RESPONSE">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader.
          This message initiates the radio config upgrade according to the file specified in the path.
        </intro>
        <field name="FirmwareFilePath" description="Path where the firmware file is present"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="utf8v"       name="ConfigFilePath" format="UTF8"/>
  </customMessageDefinition>

  <!--  Response message for MOTO_RADIO_CONFIG_UPDATE_RESPONSE message -->
  <customMessageDefinition        name="MOTO_UPDATE_RADIO_CONFIG_RESPONSE"
                                  vendor="moto" subtype="13"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_UPDATE_RADIO_CONFIG">MOTO_UPDATE_RADIO_CONFIG</a> message.
          This message indicates status of the config update.
        </intro>
        <param type="LLRPStatus" description="Status of operation."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter repeat="1"   type="LLRPStatus"/>
  </customMessageDefinition>

  <!--  Custom message to indicate radio files update status  -->
  <customMessageDefinition        name="MOTO_GET_RADIO_UPDATE_STATUS"
                                  vendor="moto" subtype="14"
                                  namespace="moto"
                                  responseType="MOTO_GET_RADIO_UPDATE_STATUS_RESPONSE">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader.
          This message is used to obtain status of the radio firmware or config update.
        </intro>
        <field name="FirmwareFilePath" description="Path where the firmware file is present"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
  </customMessageDefinition>

  <!--  Response message for MOTO_GET_RADIO_UPDATE_STATUS_RESPONSE message    -->
  <customMessageDefinition        name="MOTO_GET_RADIO_UPDATE_STATUS_RESPONSE"
                                  vendor="moto" subtype="15"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_GET_RADIO_UPDATE_STATUS">MOTO_GET_RADIO_UPDATE_STATUS</a> message.
          This message indicates status of the radio files (firmware or config) update.
        </intro>
        <param type="LLRPStatus" description="Status of operation. 0 for Success, otherwise error code returned from radio communicated"/>
        <param type="MotoRadioUpdateStatusInfo" description="Radio Update Status information."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter repeat="1"   type="LLRPStatus"/>
    <parameter repeat="1" type="MotoRadioUpdateStatusInfo"/>
  </customMessageDefinition>

  <!--  Custom message to send a C2 command to the reader -->
  <customMessageDefinition        name="MOTO_C2_COMMAND"
                                  vendor="moto" subtype="16"
                                  namespace="moto"
                                  responseType="MOTO_C2_COMMAND_RESPONSE">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader. It is used to  send a c2 command to the reader and return the response from the reader.
        </intro>
        <field name="c2Command" description="C2 command that is being sent as part of this message."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="utf8v"      name="c2Command"/>
  </customMessageDefinition>

  <!--  Response message for MOTO_C2_COMMAND message -->
  <customMessageDefinition        name="MOTO_C2_COMMAND_RESPONSE"
                                  vendor="moto" subtype="17"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_C2_COMMAND">MOTO_C2_COMMAND</a> message.
          This message has the response from the reader for the specified C2 command.
        </intro>
        <field name="c2Response" description="Response for the C2 command from the Reader."/>
        <param type="LLRPStatus" description="Status of operation."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="utf8v"      name="c2Response"/>
    <parameter repeat="1"   type="LLRPStatus"/>
  </customMessageDefinition>
  
  
   <!--Custom message to perform VSWR on the radio-->
  <customMessageDefinition        name="MOTO_PERFORM_VSWR_CHARACTERIZATION"
                                  vendor="moto" subtype="18"
                                  namespace="moto"
                                  responseType="MOTO_PERFORM_VSWR_CHARACTERIZATION_RESULT">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the client to the reader. It is used to perform Voltage Standing Wave Ratio(VSWR) characterization per Antenna at specified transmit power(dBm) and on specified channels.
        </intro>
        <field name="AntennaIDs" description="List of AntennaIDs on which VSWR characterisation is to be performed on each antenna."/>
		<field name="TransmitPowers" description="List of transmit powers in dBm*100 at which VSWR characterisation is to be performed on each antenna. This list is mapped to the list in AntennaIDs field. "/>
		<field name="ChannelMask" description="A bit mask indicating the frequencies on which the VSWR test will be performed."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
	 <field   type="u16v"  name="AntennaIDs"/>
     <field   type="u16v"  name="TransmitPowers"/>
	 <field   type="u64"   name="ChannelMask"/>
  </customMessageDefinition>
  
  <customParameterDefinition      name="AntennaVSWRTableEntry"
                                  vendor="moto" subtype="5000"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
		  This paramter has the VSWR characeristics for a specific antenna as indicated by the AntennaID. The VSWR information per channel is specified by the parameter ChannelVSWRTableEntry.
        </intro>
        <field name="AntennaID" description="ID of the antenna"/>
		<param type="ChannelVSWRTableEntry" description="VSWR information per channel at a particular Antenna."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
	<field     type="u16"  name="AntennaID"/>
	<parameter repeat="1-N"   type="ChannelVSWRTableEntry"/>
    <allowedIn  type="MOTO_PERFORM_VSWR_CHARACTERIZATION_RESULT" repeat="1"/>
    </customParameterDefinition>
  
  <customParameterDefinition      name="ChannelVSWRTableEntry"
                                  vendor="moto" subtype="5001"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
		  This paramter provides the VSWR information for a specific channel for a single antenna.
        </intro>
        <field        type="u32"      name="ChannelFrequency" description="Channel frequency for which the infromation is provided"/>
		<field        type="u16"      name="ForwardPower" description="Forward power transmitted"/>
		<field        type="u16"      name="ReversePower" description="Reverse power received"/>
		<field        type="u32"      name="VSWR" description="Voltage standing wave ratio"/>
		<param        type="UTCTimestamp"      description="UTC Timestamp at which the channel's VSWR was computed."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
	<field        type="u32"      name="ChannelFrequency"/>
	<field        type="u16"      name="ForwardPower"/>
	<field        type="u16"      name="ReversePower"/>
	<field        type="u32"      name="VSWR"/>
	<parameter repeat="0-1" type="UTCTimestamp"/>
    <allowedIn    type="AntennaVSWRTableEntry" repeat="1"/>
    </customParameterDefinition>

  <!--  Response message for MOTO_PERFORM_VSWR_CHARACTERIZATION message -->
  <customMessageDefinition        name="MOTO_PERFORM_VSWR_CHARACTERIZATION_RESULT"
                                  vendor="moto" subtype="19"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This message is sent from the reader to the client in response to a <a href="#MOTO_PERFORM_VSWR_CHARACTERIZATION">MOTO_PERFORM_VSWR_CHARACTERIZATION</a> message.
          This message has the results from the VSWR Characterisation  for the reader.
        </intro>
        <param type="AntennaVSWRTableEntry" description="Aggregation of VSWR information on all channels per Antenna"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter repeat="1-N"   type="AntennaVSWRTableEntry"/>
	 <parameter repeat="1"   type="LLRPStatus"/>
  </customMessageDefinition>

  <!--  csh. bumped off subtype. To start from 500 -->
  <customParameterDefinition      name="MotoRadioPowerState"
                                  vendor="moto" subtype="500"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to enable or disable power of radio used in the reader.
          If this parameter is included in SET_READER_CONFIG and the state is mentioned as ON (logic 1), then radio power needs to be enabled (turned ON), otherwise should be disbled (turned OFF).
          If this parameter is used in GET_READER_CONFIG_RESPONSE, the value indicates the current state of radio power.
          => 1 = ON and 0 = OFF
        </intro>
        <field name="RadioPowerState" description="Indicates whether to turn on or turn off the radio."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u1"       name="RadioPowerState"/>
    <reserved     bitCount="7"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>


  <!--  Response message for MOTO_GET_RADIO_UPDATE_STATUS_RESPONSE message    -->
  <customParameterDefinition      name="MotoRadioUpdateStatusInfo"
                                  vendor="moto" subtype="501"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to obtain info on the progress of the firmware or config download requests.
        </intro>
        <field name="PercentageComplete" description="Indicates the percent complete of the firmware or config update."/>
        <field name="RadioUpdateStatusCode" description="Indicates success or failure of the operation."/>
        <field name="StatusDescription" description="Describe the status of the operation"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u8"       name="PercentageComplete"/>
    <field        type="u8"       name="RadioUpdateStatusCode"/>
    <field        type="utf8v"    name="StatusDescription" format="UTF8"/>
    <allowedIn    type="MOTO_GET_RADIO_UPDATE_STATUS_RESPONSE" repeat="1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoRadioDutyCycle"
                                  vendor="moto" subtype="502"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to set duty cycle value of the radio used in Ozone.
          If this parameter is included in SET_READER_CONFIG, then the value mentioned would be used as an index to the duty cycle table. The value in the table is picked accordingly and would be set to the radio.
        </intro>
        <field name="DutyCycleIndex" description="Index in the Duty cycle table as reported in the Reader Capabilities."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u8"       name="DutyCycleIndex"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
  </customParameterDefinition>


  <customParameterDefinition      name="MotoRadioDutyCycleTable"
                                  vendor="moto" subtype="503"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports reader's capability to support different duty cycles on the radio. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is reported from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of Radio Duty Cycle Capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities">MotoGeneralRequestCapabilities</a>). <br/>
          This parameter is used to provide a table of duty cycle values supported by the radio used in the reader.
          If entry is zero, then duty cycle modification is not allowed.
        </intro>
        <field name="DutyCyclePercentage" description="List of Duty cycle percentages allowed in the reader."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16v"   name="DutyCyclePercentage"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE" repeat="0-1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoVersion"
                                vendor="moto" subtype="256"
                                namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter reports the name and version of a module. This currently reports the Radio Firmware and OEM versions.
        </intro>
        <field name="ModuleName" description="Name of the module."/>
        <field name="ModuleVersion" description="Version of the module."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="utf8v"       name="ModuleName"/>
    <field        type="utf8v"       name="ModuleVersion"/>
    <allowedIn    type="MotoVersionList" repeat="0-N"/>
  </customParameterDefinition>
  
  <customParameterDefinition      name="MotoVersionList"
                                  vendor="moto" subtype="504"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter reports the versions of reader components. If entry is zero, then version reporting is not supported.
        </intro>
        <field name="VersionList" description="List of versions being reported."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter    repeat="0-N"    type="MotoVersion"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE" repeat="0-1"/>
  </customParameterDefinition>

<!-- Extensions for configuration for Portal Directionality -->
<customParameterDefinition      name="MotoPortalDirectionalityConfiguration"
                                vendor="moto" subtype="505"
                                namespace="moto">
  <annotation>
    <documentation>
      This parameters specifies configuration required by portal directionality.
      <field name="Mode" description="Default value in FX74xx readers is 1 (Hybrid Method) which enhances Antenna Index Method (AIM) with supplemental RF measurements. Poor RF environments may use value 0 which is solely Antenna Index Method"/>
 	    <param type="MotoPortalDirectionalitySource" description="List of sources that each represent passage through a portal in an outbound direction from the area observed by a portal. Each source is composed of an antenna set. One antenna is designated as the Out (outwards, outbound) direction. Note that the same antenna(s)can be reused in a different source(s) to represent the OTHER direction of passage throught the same portal. Enable the feature if there are source definition, otherwise disable the feature"/>
	    <param type="ModeControlParameter" description="This parameter carries the configuration required by specific mode used in portal directionality "/>
    </documentation>
    <description>
   	</description>
  </annotation>
  <field     type="u8"    name="Mode" enumeration="MotoPortalDirectionalityMode"/>
  <parameter repeat="0-N" type="MotoPortalDirectionalitySource"/>
  <choice		 repeat="0-1" type="ModeControlParameter"/>
  <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
</customParameterDefinition>

<!-- define enumeration for mode of portal directionality -->
<customEnumerationDefinition    name="MotoPortalDirectionalityMode"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>Specifies mode for portal directionality.</intro>
      <enum Value="0" Definition="AntennaIndexMethod; mode 0 is basic antenna index method to detect target tag."/>
      <enum Value="1" Definition="AntennaIndexMethodWithRFMetrics; mode 1 adopts algorithm of antenna index method (AIM) and uses RF Measurements to assist in detecting target tag."/>
    </documentation>
    <description copyright="">
    </description>
  </annotation>

  <entry     value="0"        name="AntennaIndexMethod"/>
  <entry     value="1"        name="AntennaIndexMethodWithRFMetrics"/>
</customEnumerationDefinition>

<!-- Choice definition to choose one of the mode control parameter -->
<customChoiceDefinition        name="ModeControlParameter"
                                namespace="moto">
  <parameter type="MotoPortalDirectionalityAIMControlParameter"/>
</customChoiceDefinition>

<!-- Extensions for configuration of AIM mode for Portal Directionality -->
<customParameterDefinition      name="MotoPortalDirectionalityAIMControlParameter"
                                vendor="moto" subtype="506"
                                namespace="moto">
  <annotation>
    <documentation>
      This parameters specifies configuration required by AIM method of portal directionality.
 			<field name="ConfidenceThreshold" description="Confidence threshold to determine if target tag reported as Source."/>
    </documentation>
    <description>
   	</description>
  </annotation>
  <field	   type="u32"   name="ConfidenceThreshold"/>
</customParameterDefinition>

<!-- Extensions for engineer configuration for Portal Directionality -->
<customParameterDefinition      name="MotoPortalDirectionalityEngineerParameter"
                                vendor="moto" subtype="507"
                                namespace="moto">
  <annotation>
    <documentation>
      This parameters specifies engineer configuration required by portal directionality.
      <field name="TimeSinceFirst" description="Time since first read to be considered as ambient tag."/>
			<field name="TimeSinceLast" description="Time since last read to be visible/not visible, trigger directionality algorithm."/>
      <field name="Generic" description="General parameter parsed by algorithm"/> 		 			
    </documentation>
    <description>
   	</description>
  </annotation>
  <field	   type="u32"   name="TimeSinceFirst"/>
  <field	   type="u32"   name="TimeSinceLast"/>
  <field	   type="u32"   name="Generic"/>
  <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>  
</customParameterDefinition>


<!--  csh. bumped off subtype. To start from 500 -->
<customParameterDefinition      name="MotoSledBatteryStatus"
                                vendor="moto" subtype="508"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>
        This parameter reports reader's battery level and battery status.
      </intro>
      <field name="BatteryLevel" description="Provides battery level of reader in percentage."/>
	  <field name="Status" description="Provides battery status of reader."/>
    </documentation>
    <description copyright="">
      <h:p></h:p>
    </description>
  </annotation>
  <field        type="u32"   name="BatteryLevel"/>
  <field        type="u8"       name="Status"
                                enumeration="MotoBatteryStatus"/>
  <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
</customParameterDefinition>

<!-- define enumeration for battery status type -->
<customEnumerationDefinition    name="MotoBatteryStatus"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>Battery status</intro>
      <enum Value="0" Definition="Charging"/>
      <enum Value="1" Definition="Discharging"/>
      <enum Value="2" Definition="Critical level"/>
      <enum Value="-1" Definition="Status unknown"/>
    </documentation>
    <description copyright="">
    </description>
  </annotation>

  <entry     value="0"        name="BATTERY_CHARGING"/>
  <entry     value="1"        name="BATTERY_DISCHARGING"/>
  <entry     value="2"        name="BATTERY_LEVEL_CRITICAL"/>
  <entry     value="-1"        name="STATUS_UNKNOWN"/>
</customEnumerationDefinition>

 <customParameterDefinition      name="MotoUSBHostParams"
                                  vendor="moto" subtype="509"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to configure applicable USB Host Parameters on the reader
        If this parameter is used in GET_READER_CONFIG_RESPONSE, the value indicates the current value of USB Host on time.
        </intro>
        <field name="USBHostTurnOnTime" description="Controls USB Host power on or off. USBHostTurnOnTime > 0, then USB Host power will be turned on after specified time. 
			If USBHostTurnOnTime = 0, USB Host is powered off immediately.
			If USBHostTurnOnTime = 0x7fff, USB Host is powered on immediately
          THe USB Host Turn On Time is in Seconds. "/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="s16"       name="USBHostTurnOnTime"/>
	<reserved     bitCount="32"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <!--  End of Ozone specific llrp schema implemenation -->

  <!--  csh. ............................................................End: -->

  <!-- This parameter is used to define a filter rule that determines whether or not tags make into reader's tag list -->
  <customParameterDefinition      name="MotoFilterRule"
                                  vendor="moto" subtype="254"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter defines a single filter rule.
          One of more of these rules can be combined to create a filter list using <a href="#MotoFilterList">MotoFilterList</a> parameter. <br/>
          At least one of RSSI range (refer <a href="#MotoFilterRSSIRange">MotoFilterRSSIRange</a>) or time range (refer <a href="#MotoFilterTimeRange">MotoFilterTimeRange</a>) needs to be specified in a rule. If both RSSI and time range are specified in a rule, both needs to be satisfied for the filter criteria to pass i.e. an AND rule is applied. <br/>
          RuleType determines action on a tag that matches the filter rule. if rule type is 'Inclusive', tag matching the filter is included
          for reporting to client and non matching tags are excluded from being reported to client.
          If RuleType is 'Exclusive' tag matching the filter is dropped and not reported to the client, while non-matching tags are reported to client.
          RuleType of 'Continue' can be used to create multiple filter rules and apply these in a sequence.
          All except the last MotoFilterRule in <a href="#MotoFilterList">MotoFilterList</a> parameter will have
          RuleType set to 'Continue' in such a case for all rules to be applied. If one of the interim rule does not match, tag is dropped
          and not reported to the client. If last rule is continue and it matches, then tag is reported to client.
        </intro>
        <field name="RuleType" description="Action to be performed on matching tag."/>
        <param type="MotoFilterRSSIRange" description="RSSI range filter."/>
        <param type="MotoFilterTimeRange" description="Time range filter."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u8"       name="RuleType"
                                  enumeration="MotoFilterRuleRuleType"/>
    <parameter    repeat="0-1" type="MotoFilterRSSIRange"/>
    <parameter    repeat="0-1" type="MotoFilterTimeRange"/>
    <allowedIn    type="MotoFilterList" repeat="0-N"/>
  </customParameterDefinition>

  <!-- define enumeration for match rule type -->
  <customEnumerationDefinition    name="MotoFilterRuleRuleType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies action for tags matching this rule.</intro>
        <enum Value="0" Definition="Inclusive; Tag matching this rule will be included for reporting to client."/>
        <enum Value="1" Definition="Exclusive; Tag matching this rule will be excluded from being reported to client."/>
        <enum Value="2" Definition="Continue; If tag matches this rule, do not include tag yet, but continue processing any subsequent rules in rule list. If tag do not match the rule, it is excluded from being reported without further processing other rules. 
      														If this is the last rule in the rule list and tag matches the rule, tag is included."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <entry     value="0"        name="Inclusive"/>
    <entry     value="1"        name="Exclusive"/>
    <entry     value="2"        name="Continue"/>
  </customEnumerationDefinition>

  <!-- New time format to represent time of day to be used only for filtering criteria-->
  <customParameterDefinition      name="MotoFilterTimeOfDay"
                                  vendor="moto" subtype="251"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter defines time value with respect to 24 hour clock. It can be used to define bounds on time when filtering on time of day is desired.
        </intro>
        <field name="Microseconds" description="Number of microseconds since 0:00:00:000 Midnight."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u64"      name="Microseconds" />
    <allowedIn    type="MotoFilterTimeRange" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter is used to define a time range in which tags are evaluated for selection -->
  <customParameterDefinition      name="MotoFilterTimeRange"
                                  vendor="moto" subtype="252"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter represents a time based tag filter.
          Time based filter can be based on UTC Timestamp or based on the time of day when tag read happen.
          MotoFilterTimeFormatChoice list specifies the lower and upper time bounds. Two entries need to be present in the list.
          First entry is used for lower bound and second for the upper bound. <br/>
          Note: Only first two entries in the time format choice list (MotoFilterTimeFormatChoice) is used for lower time limit and upper time limit respectively.
        </intro>
        <field name="TimeFormat" description="Selection for time format."/>
        <field name="Match" description="Selection for match range."/>
        <choice type="MotoFilterTimeFormatChoice" description="One of list of MotoUTCTimestamp or list of MotoFilterTimeOfDay"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u8"       name="TimeFormat"
                                  enumeration="MotoFilterTimeRangeTimeFormat"/>
    <field        type="u8"       name="Match"
                                  enumeration="MotoFilterTimeRangeMatch"/>
    <choice       repeat="1-N"    type="MotoFilterTimeFormatChoice"/>
    <allowedIn    type="MotoFilterRule" repeat="0-1"/>
  </customParameterDefinition>

  <!-- Choice definition to choose one of the multiple time formats supported -->
  <customChoiceDefinition        name="MotoFilterTimeFormatChoice"
                                  namespace="moto">
    <parameter type="MotoFilterTimeOfDay"/>
    <parameter type="MotoUTCTimestamp"/>
  </customChoiceDefinition>

  <customParameterDefinition      name="MotoUTCTimestamp"
                                  vendor="moto" subtype="250"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter represents a custom UTC Timestamp representation format. Microseconds field represents number of microseconds elapsed since Unix Epoc (Midnight, Jan 1, 1970).
        </intro>
        <field name="Microseconds" description="Number of microseconds since Epoc."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field     type="u64"   name="Microseconds" format="Datetime"/>
  </customParameterDefinition>

  <!-- define enumeration to choose time format for time range criteria-->
  <customEnumerationDefinition    name="MotoFilterTimeRangeTimeFormat"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies time format.</intro>
        <enum Value="0" Definition="Time of the day"/>
        <enum Value="1" Definition="UTC Timestamp"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <entry     value="0"        name="Time_Of_Day"/>
    <entry     value="1"        name="UTC_Timestamp"/>
  </customEnumerationDefinition>

  <!-- define enumeration for time range match criteria-->
  <customEnumerationDefinition    name="MotoFilterTimeRangeMatch"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies time range filtering bounds.</intro>
        <enum Value="0" Definition="Within range; between lower and upper time limits, lower and upper limit inclusive."/>
        <enum Value="1" Definition="Outside range; outside lower and upper time limits, lower and upper limit inclusive."/>
        <enum Value="2" Definition="Greater than lower limit; Greater than lower time limit, ignore upper limit, lower limit inclusive."/>
        <enum Value="3" Definition="Lower than upper limit; Lower than upper time limit, ignore lower limit, upper limit inclusive."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <entry     value="0"        name="Within_Range"/>
    <entry     value="1"        name="Outside_Range"/>
    <entry     value="2"        name="Greater_Than_Lower_Limit"/>
    <entry     value="3"        name="Lower_Than_Upper_Limit"/>
  </customEnumerationDefinition>

  <!-- This parameter is used to define a RSSI range in which tags are evaluated for selection -->
  <customParameterDefinition      name="MotoFilterRSSIRange"
                                  vendor="moto" subtype="253"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter represents an RSSI based tag filter.
          PeakRSSI parameter specifies the lower and upper bounds. Two entries need to be present in the list of PeakRSSI sub-parameter.
          First entry is used for lower bound and second for the upper bound.
        </intro>
        <field name="Match" description="Selection for match range."/>
        <choice type="PeakRSSI" description="List of PeakRSSI values"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u8"       name="Match"
                                  enumeration="MotoFilterRSSIRangeMatch"/>
    <reserved     bitCount="8"/>
    <parameter    repeat="1-N"  type="PeakRSSI"/>
    <allowedIn    type="MotoFilterRule" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for RSSI range match criteria-->
  <customEnumerationDefinition    name="MotoFilterRSSIRangeMatch"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies RSSI value bounds</intro>
        <enum Value="0" Definition="Within range; between lower and upper RSSI limits, lower and upper limit inclusive."/>
        <enum Value="1" Definition="Outside range; outside lower and upper RSSI limits, lower and upper limit inclusive."/>
        <enum Value="2" Definition="Greater than lower limit; Greater than lower RSSI limit, ignore upper limit, lower limit inclusive."/>
        <enum Value="3" Definition="Lower than upper limit; Lower than upper RSSI limit, ignore lower limit, upper limit inclusive"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="Within_Range"/>
    <entry     value="1"        name="Outside_Range"/>
    <entry     value="2"        name="Greater_Than_Lower_Limit"/>
    <entry     value="3"        name="Lower_Than_Upper_Limit"/>
  </customEnumerationDefinition>

  <!-- This parameter is used to initiate item locating operation -->
  <customParameterDefinition      name="MotoFindItem"
                                  vendor="moto" subtype="270"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter is used to locate a tag preset in reader's field of view using one of the supported tag locating algorithms supported by the reader. Currently one algorithm is supported. It can be invoked by setting Mode field to 0. Other values of Mode field and use for ModeParam field are reserved for future.</intro>
        <field name="Mode" description="Reserved for future. Provide value as 0."/>
        <field name="ModeParam" description="Reserved for future. Provide value as 0."/>
        <field name="AntennaIDs" description="Antenna on which locationing is to be performed. The default logic supports locationing only on a single antenna."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field        type="u16"       name="Mode"/>
    <field        type="u16"       name="ModeParam"/>
    <field	      type="u16v"      name="AntennaIDs"/>
    <allowedIn type="InventoryParameterSpec" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a tags location information -->
  <customParameterDefinition      name="MotoLocationResult"
                                  vendor="moto" subtype="271"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter holds result of tag locating operation. RelativeDistance field reports the relative distance in a scale between 0-100. Zero means tag cannot be detected, 1 is lowest tag detection frequency (tag is very far) whereas 100 indicates max detection frequency(tag is very close).</intro>
        <field name="RelativeDistance" description="Provides information about the relative distance in a scale of 0-100."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field     type="s16"    name="RelativeDistance"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

<!-- This parameter is source definition for portal directionality-->
<customParameterDefinition      name="MotoPortalDirectionalitySource"
                                vendor="moto" subtype="272"
                                namespace="moto">
  <annotation>
    <documentation>
      This parameters specifies additional parameters define concept of source in portal directionality.
      <field name="SourceID" description="Unique number to indicate different source, 0 is an ID that is reserved to represent Ambient tags (tags that persist in the read zone)."/>
      <field name="MotoPortalDirectionalityAntenna" description="List of antennas included by source"/>
    </documentation>
    <description>
   	</description>
  </annotation>
  <field	      type="u16"      name="SourceID"/>
  <parameter    repeat="1-N"    type="MotoPortalDirectionalityAntenna"/>
    <allowedIn type="MotoPortalDirectionalityConfiguration" repeat="0-N"/>
	</customParameterDefinition>

<!-- This parameter is used to extend antenna settings for portal directionality-->
<customParameterDefinition      name="MotoPortalDirectionalityAntenna"
                                vendor="moto" subtype="273"
                                namespace="moto">
  <annotation>
    <documentation>
      This parameters specifies additional parameters per antenna needed to support portal directionality.
      <field name="AntennaID" description="AntennaID specifies which antennas to perform portal directionality with. If set to zero,  the algorithm is used with all the antennas specified in the AISpec."/>
      <field name="Direction" description="Defines the tag movement at an antenna."/>
    </documentation>
    <description>
   	</description>
  </annotation>
  <field	   type="u16"   name="AntennaID"/>
  <field     type="u8"  	name="Direction" 	enumeration="MotoPortalDirectionalityAntennaDirection"/>
    <allowedIn type="MotoPortalDirectionalitySource" repeat="1-N"/>
	</customParameterDefinition>

<!-- define enumeration for portal directionality antenna direction -->
<customEnumerationDefinition    name="MotoPortalDirectionalityAntennaDirection"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>List of possible results:</intro>
      <enum Value="0" Definition="The tags are moving IN to the area observed by a Portal Directionality source"/>
      <enum Value="1" Definition="The tags are moving OUT of or away from the area observed by a Portal Directionality source."/>
    </documentation>
    <description copyright="">
    </description>
  </annotation>
    <entry     value="0"    name="Input"/>
    <entry     value="1"    name="Output"/>
</customEnumerationDefinition>

<!-- This parameter is used to report list of event generated by portal directionality -->
<customParameterDefinition      name="MotoPortalDirectionalityEventList"
                                vendor="moto" subtype="274"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>
      	This is a custom parameter in TagReportData, if there are events associated with a tag. This parameter in TagReportData is generated as a response to MOTO_PORTAL_DIRECTIONALITY_GET_TAG_EVENT_REPORT or during asynchronous reporting when KeepTargetTagWaitForPoll is set as 0.
      </intro>
	    <param type="MotoTagEventEntry" description="MotoTagEventEntry parameter"/>
    </documentation>
    <description copyright="">
    </description>
  </annotation>
	<parameter repeat="0-N" type="MotoPortalDirectionalityEventEntry"/>
  <allowedIn    type="TagReportData" repeat="0-1"/>
</customParameterDefinition>

<!-- This parameter present event generated by portal directionality -->
<customParameterDefinition      name="MotoPortalDirectionalityEventEntry"
                                vendor="moto" subtype="275"
                                namespace="moto">
  <annotation>
    <documentation>
      <intro>
      	This parameter defines a tag event entry.  One or more such event entries may be associated with a tag and defined in MotoTagEventEntry associated with TagReportData for a particular tag.
      </intro>
	    <field name="Microseconds" description="UTC Timestamp when the event happened."/>
	    <field name="SourceID" description="Unique number defined in MotoPortalDirectionalitySource, 0 is ambient tag, non-0 is target tag"/>
	    <field name="Confidence" description="It's a combined score based on slope and correlation result"/>	    
    </documentation>
    <description copyright="">
    </description>
  </annotation>
  <field        type="u64"      name="Microseconds" format="Datetime"/>
  <field	      type="u16"      name="SourceID"/>
  <field	      type="u8"       name="Confidence"/>  
  <allowedIn    type="MotoTagEventList" repeat="0-N"/>
</customParameterDefinition>

<!-- This parameter is used to set and get in a generic way some parameters mainly as engineering tool to debug and test -->
<customParameterDefinition      name="MotoGenericParameter"
                                vendor="moto" subtype="600"
                                namespace="moto">
  <annotation>
    <documentation>
	    <intro>
	     This a bit-array parameter which is used to generically set and get a parameter using the SET_READER_CONFIG message and GET_READER_CONFIG. It is used by engineering for debugging and testing purposes. More than one parameter can be set or requested with one message.
	    </intro>
	    <field name="ParamNumber" description="A number a uniquely identifies a parameter. This could be a LLRP parameter type or some other number defined by engineering."/>
	    <field name="MotoParam" description="A bit string or array containing the parameter value"/>
    </documentation>
    <description>
    </description>
  </annotation>

  <field        type="u16"       name="ParamNumber"/>
  <field        type="u1v"       name="MotoParam" format="Hex"/>
  <allowedIn    type="GET_READER_CONFIG" 					repeat="0-N"/>
  <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-N"/>
  <allowedIn    type="SET_READER_CONFIG"        	repeat="0-N"/>
  <allowedIn    type="ReaderEventNotificationData" repeat="0-N"/>  
</customParameterDefinition>
<!--
THE FOLLOWING PARAMS WILL BE ACCESSIBLE THRU MotoGenericParameter
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10001 Tag list sizes (Ambient and Target)
Type: Unsigned
Engineering feature

The maximum number of tags in tag lists that contain tag measurements (Ambient and Target).  Programmable sizes assist in managing measurements. By making the sizes programmable, changes can be made to the resource utilization of the Directionality module without recompiling. It can ensure that a maximum of memory utilization will be enforced.

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10002 Input Mode (File or Tag Data queue)
Type: Enumeration and String (path/filename)
Engineering feature

This parameter can force the module to take in tag measurements from a file, rather than from the live radio/modem (which is default). This will be very useful in replaying and post-analyzing data sets that are recorded in the field. Note that this presupposes that the recording of said data was enabled (see output mode). Other parameters can be readjusted between replays to optimize operational settings.

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10003 Output Mode
Type: Enumeration or Bitmapped value and String

This parameter determines what information is to be output, and where it should go. As a default, there is a minimum set of standard classification results produced by the Directionality module that is sent to the standard FX74xx  interfaces. There are also varying degrees of debug information that need be exposed. The degree of extra information is the what of output content. The where determines whether to send this extra data to the standard interface in supplemental message fields, or save to file for offsite/post analysis.

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10004 Time Thresholds (Visibility and Staleness)
Type: Unsigned (units of seconds)

These parameters set the time thresholds that determine time-based decisions about tags that have been observed.

1.	Time since last read to be visible/not visible
2.	Time since first read to be considered stale (as long as antenna hasnt changed [see antenna stability threshold])

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10005 Antenna stability threshold 
Type: Unsigned (default: 1)

This parameter determines the (inclusive) maximum number of times a tag may switch antennas and remain qualified to be pre-determined as ambient.

Note: The ambient criteria will likely be modified as engineering/field test results are obtained. This is especially important in cases where non-moving tags are visible on both antennas. Such a scenario often results in misclassification. The time threshold may be scaled by the number of times and may be judged ratiometrically.

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10006 Analysis intervals
Type: Unsigned (milliseconds between calculations)

It is possible that better overall system performance could be obtained by allowing some measurements to collect between performances of the internal Portal Direction analyses (essentially batch processing). Note that this is a suggestion, and may be overridden by software before loss of data occurs.

 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ParamNumber = 10007 Algorithm thresholds
Type: Slope is a Float. Correlation is also a Float, but it has a valid range only from -1.0 through 1.0. Slope differential (for RSSI method only) is also slope.
 -->

  <!-- This parameter is used to enable or disable autonomous mode of operation -->
  <customParameterDefinition      name="MotoAutonomousState"
                                  vendor="moto" subtype="101"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to enable or disable autonomous mode of operation. It is sent as a custom parameter to SET_READER_CONFIG message.
          Current autonomous mode state can be retrieved from GET_READER_CONFIG_ RESPONSE by client by requesting reporting of corresponding custom parameter in GET_READER_CONFIG message.
        </intro>
        <field name="AutonomousModeState" abbreviatedName="A" expandedName="Autonomous Mode State" description="If true, then autonomous mode is enabled else it is disabled."/>
      </documentation>
      <description copyright="">
        Note: Autonomous mode is disabled by default on the reader.
      </description>
    </annotation>

    <field        type="u1"       name="AutonomousModeState"/>
    <reserved     bitCount="7"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoTagEventSelector"
                                  vendor="moto" subtype="121"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter configures events to be reported by the reader to the client for tag state changes. This is an optional sub-parameter in ROReportSpec parameter. Enabling reporting and its format is controlled by <a href="#MotoTagReportMode">MotoTagReportMode Parameter</a>. <br/>
          Default event selector setting has new tag events and tag visibility change events set to be reported immediately and tag invisible events to be reported by a moderation timeout of 8 sec.
        </intro>
        <field name="ReportNewTagEvent" description="Selects reporting for new tag event"/>
        <field name="NewTagEventModeratedTimeout" description="Timeout in milliseconds for moderating new tag event reporting. 
	    						This is used only if ReportNewTagEvent is set to Moderated mode of reporting."/>
        <field name="ReportTagInvisibleEvent" description="Selects reporting for tag invisible event"/>
        <field name="TagInvisibleEventModeratedTimeout" description="Timeout in milliseconds for moderating tag invisible event reporting. 
	    						This is used only if ReportTagInvisibleEvent is set to Moderated mode of reporting."/>
        <field name="MotoTagEventSelectorReportTagVisibilityChangeEvent" description="Selects reporting for tag visibility change event. 
	    						Visibility change happens when a tag which was previously known to the reader on one of its antennas becomes visible on another antenna."/>
        <field name="TagVisibilityChangeEventModeratedTimeout" description="Timeout in milliseconds for moderating tag visibility change event reporting. This is used only if MotoTagEventSelectorReportTagVisibilityChangeEvent is set to Moderated mode of reporting."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field        type="u8"       name="ReportNewTagEvent"
                                  enumeration="MotoTagEventSelectorReportNewTagEvent"/>
    <field        type="u16"      name="NewTagEventModeratedTimeout"/>
    <field        type="u8"       name="ReportTagInvisibleEvent"
                                  enumeration="MotoTagEventSelectorReportTagInvisibleEvent"/>
    <field        type="u16"      name="TagInvisibleEventModeratedTimeout"/>
    <field        type="u8"       name="ReportTagVisibilityChangeEvent"
                                  enumeration="MotoTagEventSelectorReportTagVisibilityChangeEvent"/>
    <field        type="u16"      name="TagVisibilityChangeEventModeratedTimeout"/>
    <allowedIn    type="ROReportSpec" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for new tag event behavior type -->
  <customEnumerationDefinition    name="MotoTagEventSelectorReportNewTagEvent"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies New Tag event reporting criteria</intro>
        <enum Value="0" Definition="Never: New tag event reporting is disabled."/>
        <enum Value="1" Definition="Immediate: Send event immediately."/>
        <enum Value="2" Definition="Moderated: Send event based on NewTagEventModeratedTimeout setting."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <entry     value="0"        name="Never"/>
    <entry     value="1"        name="Immediate"/>
    <entry     value="2"        name="Moderated"/>
  </customEnumerationDefinition>

  <!-- define enumeration for tag invisible event behavior type -->
  <customEnumerationDefinition    name="MotoTagEventSelectorReportTagInvisibleEvent"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies Tag Invisible event reporting criteria</intro>
        <enum Value="0" Definition="Never: Tag invisible event reporting is disabled."/>
        <enum Value="1" Definition="Immediate: Send event immediately."/>
        <enum Value="2" Definition="Moderated: Send event based on TagInvisibleEventModeratedTimeout setting."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="Never"/>
    <entry     value="1"        name="Immediate"/>
    <entry     value="2"        name="Moderated"/>
  </customEnumerationDefinition>

  <!-- define enumeration for tag visibility change event behavior type -->
  <customEnumerationDefinition    name="MotoTagEventSelectorReportTagVisibilityChangeEvent"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies Tag Visibility change event reporting criteria</intro>
        <enum Value="0" Definition="Never: Tag visibility change event reporting is disabled."/>
        <enum Value="1" Definition="Immediate: Send event immediately."/>
        <enum Value="2" Definition="Moderated: Send event based on TagVisibilityChangeEventModeratedTimeout setting."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="Never"/>
    <entry     value="1"        name="Immediate"/>
    <entry     value="2"        name="Moderated"/>
  </customEnumerationDefinition>

  <!-- Parameter used to set tag reporting mode -->
  <customParameterDefinition      name="MotoTagReportMode"
                                  vendor="moto" subtype="122"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter controls whether or not event reporting is enabled and the format for event reporting. This is an optional sub-parameter in ROReportSpec parameter. Selection of events to be monitored is controlled using <a href="#MotoTagEventSelector">MotoTagEventSelector Parameter</a>. <br/>
          Default report format is Report_Notifications.

        </intro>
        <field name="ReportFormat" description="Specifies reporting format."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <field        type="u8"       name="ReportFormat"
                                  enumeration="MotoReportFormat"/>
    <allowedIn    type="ROReportSpec" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for choosing report format -->
  <customEnumerationDefinition    name="MotoReportFormat"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Controls tag event reporting or specifies format of the report:</intro>
        <enum Value="0" Definition="No reporting; No notification on event change is issued from reader to client. Clients can periodically issue MOTO_GET_TAG_EVENT_ REPORT to retrieve the tag data reports with event information."/>
        <enum Value="1" Definition="Report Notification; A MOTO_TAG_EVENT_NOTIFY notify message is issued from reader to client on a tag event change. Upon notification, client can use MOTO_GET_TAG_EVENT_ REPORT message to retrieve the tag data reports with event information."/>
        <enum Value="2" Definition="Report events; All accumulated TagReportData with event extension (refer MotoTagEventList parameter)are issued from reader to client as part of RO_ACCESS_REPORT response. This is the optimal mode in which only change in events since last reporting of TagReportData with event extension reports are issued from reader to client. Reader does not send notifications to client. It sends report as soon as an event occurs and event generation criteria is met."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>

    <entry     value="0"        name="No_Reporting"/>
    <entry     value="1"        name="Report_Notifications"/>
    <entry     value="2"        name="Report_Events"/>
  </customEnumerationDefinition>

  <!-- Custom filter parameter to be used in filter matching criteria rule -->
  <customParameterDefinition      name="MotoFilterList"
                                  vendor="moto" subtype="255"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter can be used to configure filter settings on the reader to filter tags based on received signal strength of the tag or time at which tag was read or a combination of both. Filter list is composed of one or more filter rules.  (refer <a href="#MotoFilterRule">MotoFilterRule</a>). Multiple filter rules, if present, can be configured as a chain of rules using 'Continue' flag for RuleType (refer <a href="#MotoFilterRule">MotoFilterRule</a>). This will allow for continuing rule matching again subsequent rules if current rule passes. <br/>
          Note: <br/>
          1.	A maximum of 10 filter rules would be allowed in Filter List. <br/>
          2.	Default filter is kept disabled at initialization. It may be modified and enabled to start filtering for both autonomous mode and regular ROSpecs. <br/>
          3.	Default filter has a single filter rule of type inclusive (add matching tag to database), having an RSSI and time of the day based filter. Both rules allow any RSSI value (-128 to 127 dbm) and full day’s time coverage (0 to 86400000000 microseconds since midnight) by default. <br/>
        </intro>
        <field name="UseFilter" abbreviatedName="F" expandedName="Enable filtering" description="If true, filtering based on this filter list is enabled; else filtering is turned off."/>
        <param type="MotoFilterRule" description="List of filter rules."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u1"       name="UseFilter"/>
    <reserved     bitCount="31"/>
    <parameter    repeat="0-N"    type="MotoFilterRule"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter is used to save configuration, tag, and event data independent of autonomous mode -->
  <customParameterDefinition      name="MotoPersistenceSaveParams"
                                  vendor="moto" subtype="350"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter configures reader to save and restore reader configurations done over LLRP, save tag data and non-reported events in internal flash and restore these in case of power re-cycle of the reader. <br/>
          SaveTagData and SaveTagEventData would enable saving of tag and event data in persistent store on the reader across graceful reader shutdown/reboots. If tag events are saved, tag data is automatically saved along with events associated with it. Only tags stored in reader’s internal tag database generated by ROSpec (either autonomous mode or regular ROSpecs) that are set to use custom reporting preference are saved. Following conditions need to be met for a tag data report to be saved: <br/>
          1. Tag report needs to have ROSpecID, antenna ID, first seen or last seen timestamp. <br/>
          2. ROReportSpec associated with the RO that generated this tag data report must have reporting trigger set to none and <br/>
          3. ROReportSpec should have custom parameters for event reporting configured (refer <a href="#MotoTagEventSelector">MotoTagEventSelector</a> and <a href="#MotoTagReportMode">MotoTagReportMode</a> for details).
        </intro>
        <field name="SaveConfiguration" abbreviatedName="C" expandedName="Save Configuration" description="If true, configurations made over LLRP (SET_READER_CONFIG) is persisted across shutdown or restart of reader; else configuration is not saved."/>
        <field name="SaveTagData" abbreviatedName="T" expandedName="Save Tag Reports" description="If true, tags read by the reader by execution of autonomous mode or ROSpec with custom event reporting are persisted across shutdown or restart of reader; else read tags are lost if reader is shutdown or restarted."/>
        <field name="SaveTagEventData" abbreviatedName="E" expandedName="Save Tag Reports with Event List" description="If true, event list as well as the tags read by the reader by execution of autonomous mode or reader operation with custom event reporting is persisted across shutdown or restart of reader; else event list is not saved during a shutdown or reboot."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u1"       name="SaveConfiguration"/>
    <field        type="u1"       name="SaveTagData"/>
    <field        type="u1"       name="SaveTagEventData"/>
    <reserved     bitCount="5"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter is used to get/set list of ROSpec used for autonomous mode	-->
  <customParameterDefinition      name="MotoDefaultSpec"
                                  vendor="moto" subtype="102"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter defines a pre-configured ROSpec available on the reader. It is pre-defined with custom parameters for autonomous mode of operation by default<br/>

        </intro>
        <field name="UseDefaultSpecForAutoMode" abbreviatedName="A" expandedName="Use Default Spec for Autonomous Mode"
             description="If true, Default Spec will be used for autonomous (continuous read) mode of operation, else it can be used for other operations"/>
        <param type="ROSpec" description="ROSpec parameter"/>
        <param type="AccessSpec" description="List of AccessSpec parameters"/>
      </documentation>
      <description copyright="">
        The default ROSpec and list of access specs in MotoDefaultSpec Custom extension point list is applicable for autonomous or non-autonomous mode depending on the whether UseDefaultSpecForAutoMode flag in set or not . By default the reader will have MotoDefaultSpec with with one pre-configured ROSpec for doing inventory only.  An ROReport spec parameter shall always be associated with autonomous mode ROSpec and this is mandatory. By default, ROReportSpec parameter associated with MotoDefaultSpec shall have custom parameter for <a href="#MotoTagReportMode">MotoTagReportMode</a> set to Report_Notifications, so that an optimized reporting mode where only <a href="#MOTO_TAG_EVENT_NOTIFY">MOTO_TAG_EVENT_NOTIFY message</a> is issued from the reader to the client. Default event selector configured by <a href="#MotoTagEventSelector">MotoTagEventSelector</a> will have new tag events and tag visibility change events set to be reported immediately and tag invisible events to be reported by a moderation timeout of 8 seconds. <br/>
        Default ROReportSpec configurable in SET_READER_CONFIG is NOT used for autonomous mode of operation. <br/>
        Users may reconfigure the default ROSpec, ROReportSpec, and/or the list of AccessSpecs sub-parameters associated with the MotoDefaultSpec parameter in SET_READER_CONFIG message to define any custom operations for autonomous mode. <br/>
        To enable autonomous mode, client needs to set MotoAutonomousState parameter in SET_READER_CONFIG message to true. To turn off autonomous mode SET_READER_CONFIG needs to be issued with MotoAutonomousState set to false. Default configuration on the reader will have AutonomousState set to false. <br/>
        The following restrictions are applicable for autonomous mode ROSpec and AccessSpecs. These are not applicable if the UseDefaultSpecForAutoMode flag is turned off in MotoDefaultSpec. <br/>
        <ul>
          <li>ROSpec used in above custom extension by default has an ROSpec ID of 1001. This ROSpecID is not reserved.  When Autonomous mode is active, the number of Regular ROSspecs that can be added will be reduced by one. E.g if MaxNumROSpecs as reported  in reader capabilities is N and  if autonomous mode ROSpec is active, then only N-1 regular ROSpecs can be added. </li>
          <li>Maximum number of AISpec allowed in autonomous mode ROSpec is 1. Default AISpec ID will be 1001. This ID is not reserved by the system.</li>
          <li>Restrictions on maximum number of specs per ROSpec, number of IPSpec per AISpec, number of OpSpecs per access specs used for autonomous mode ROSpec will be as per those reported in reader capabilities.</li>
          <li>Maximum number of AccessSpecs (M) in the list of AccessSpecs is limited by number maximum allowed access specs on the reader, as specified in reader capabilities. Access specs associated for autonomous mode are not reserved and users can delete it.</li>
          <li>Maximum no: of OpSpecs in an access spec is currently 48.</li>
          <li>Autonomous Mode ROSpec can be added only with priority 7. No other priority will be allowed for autonomous mode ROSpec. This is to enable the execution of any regular ROSpec with higher priority, even if autonomous mode is active.</li>
          <li>ROSpec start trigger for autonomous mode cannot be NULL (it may be immediate, periodic or trigger based)</li>
          <li>Deletion of autonomous mode ROSpec is not possible using DELETE_ROSPEC message if autonomous mode is active.</li>
          <li>ROReportTrigger for the ROReport associated with autonomous mode ROSpec shall have trigger type none (ROSpecStopTriggerType = 0) and events during autonomous mode are generated based on tag visibility events rather than LLRP standard’s ROReportTrigger values.</li>
          <li>TagReportContentSelector shall have following contents in report enabled (set to true): EnableROSpecID, EnableAntennaID, EnableFirstSeenTimestamp, EnableLastSeenTimestamp. </li>
          <li>State of AccessSpecs which are part of autonomous mode ROSpec shall be in active state always.</li>
          <li>OPSpecs other than C1G2Read are not currently supported in autonomous mode access specs.</li>
          <li>AccessSpecs that are part of autonomous mode shall support Access Spec Stop Trigger type of ‘0’ (No Stop trigger) only.</li>
          <li>AccessSpecs that are part of autonomous mode shall support Access Report spec with trigger type ‘0’ (Whenever ROReport is generated) only.</li>
          <li>Enable/Disable of autonomous mode ROSpec is not allowed.</li>
          <li>Enable/Disable of access specs in MotoDefaultSpec is not allowed when autonomous mode is active.</li>
          <li>AccessSpec associated with MotoDefaultSpec needs to use the same ROSpecID as the ROSpec in MotoDefaultSpec when autonomous mode is active. AccessSpecStopTrigger other than Null are not allowed for access specs associated with autonomous mode ROspec.</li>
        </ul>
        <p>
          <strong>Note:</strong> <br/>
          Regular RO Specs (those added by an ADD_ROSPEC message) can be enabled for custom event or notification reporting by configuring the custom parameters in either the default ROReportSpec in SET_READER_CONFIG or by having its own ROReportSpec. Following restrictions apply for the ROReportSpec to be used for event or notification reporting (when MotoReportFormat custom parameter is set to one of No_Reporting, Report_Notifications or Report_Events):
        </p>
        <ul>
          <li>ROReportTrigger shall have trigger type none</li>
          <li>TagReportContentSelector shall have following contents in report enabled (set to true): EnableROSpecID, EnableAntennaID, EnableFirstSeenTimestamp, EnableLastSeenTimestamp</li>
        </ul>
        <p>
          If default ROReportSpec in reader configuration is initially used for event reporting mode for a regular ROSpec (ROReportTrigger set to none and content selectors with true values for EnableROSpecID, EnableAntennaID, EnableFirstSeenTimestamp, EnableLastSeenTimestamp) and if the default ROReportSpec is reconfigured at a later stage using SET_READER_CONFIG with any of MotoReportFormat, ROReportTrigger or one of the restricted content selectors changed to other values other than those allowed for event reporting, then existing ROSpecs reporting behavior will change to regular tag reporting mode.<br/>
          Both regular ROSpec with or without event or notification mode of reporting can co-exist with autonomous mode ROSpec. ROSpecs gets scheduled for execution based on its priority. For regular ROSpec execution, tag reports are generated based on its ROReportSpec and the RO_ACCESS_REPORT wont have tag report data generated due to execution of autonomous mode RO or regular RO configured for none, event notification, or event mode of reporting (as set in MotoTagReportMode).<br/>
          When an ROSpec is set to execute under custom event reporting mode, the tags are database in the reader and events generated based on the custom reporting criteria whenever the visibility status changes. Such tags would not get reported as a response to any GET_REPORT message. These tags are retrievable using MOTO_GET_TAG_EVENT_REPORT, provided the tag has events associated with it. Once events are reported, event list associated with that tag is cleared. So subsequent MOTO_GET_TAG_EVENT_REPORT wont report that tag. Tags generated as a result of ROSpec execution having custom notification configured would still be known to the reader, unless its explicitly purged using custom PURGE_TAGS message. Tags are maintained in the tag database as know tags so as to continue generation of visibility change or invisible events.
        </p>
      </description>
    </annotation>
    <field        type="u1"       name="UseDefaultSpecForAutoMode"/>
    <reserved     bitCount="7"/>
    <parameter repeat="1"   type="ROSpec"/>
    <parameter repeat="0-N" type="AccessSpec"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter is used to report list of event changes for a tag in its tag report data -->
  <customParameterDefinition      name="MotoTagEventList"
                                  vendor="moto" subtype="123"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a custom parameter in TagReportData, if there are events associated with a tag. This parameter in TagReportData is generated as a response to MOTO_GET_TAG_EVENT_REPORT or during asynchronous reporting when MotoReportFormat custom parameter is set to ‘Report_Events’. Each event entry of type <a href="#MotoTagEventEntry">MotoTagEventEntry</a> defines a particular event that happened to the tag reported in TagReportData.
        </intro>
        <param type="MotoTagEventEntry" description="MotoTagEventEntry parameter"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <parameter repeat="0-N" type="MotoTagEventEntry"/>
    <allowedIn    type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter extends TagReportData to provide info about the event associated with a tag-->
  <customParameterDefinition      name="MotoTagEventEntry"
                                  vendor="moto" subtype="124"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter defines a tag event entry. It gives type of event that happened to a tag and timestamp of occurrence of that event. One or more such event entries may be associated with a tag and defined in the <a href="#MotoTagEventList">MotoTagEventList</a> associated with TagReportData for a particular tag.
        </intro>
        <field name="EventType" description="Type of event."/>
        <field name="Microseconds" description="UTC Timestamp when the event happened."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u8"       name="EventType"
                                  enumeration="MotoTagEventTypeEnum"/>
    <field        type="u64"      name="Microseconds" format="Datetime"/>
    <allowedIn    type="MotoTagEventList" repeat="0-N"/>
  </customParameterDefinition>

  <!-- define enumeration for match rule type -->
  <customEnumerationDefinition    name="MotoTagEventTypeEnum"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies requested data</intro>
        <enum Value="0" Definition="Unknown state"/>
        <enum Value="1" Definition="New Tag Visible"/>
        <enum Value="2" Definition="Tag Not Visible"/>
        <enum Value="3" Definition="Tag Visibility Changed"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="Unknown"/>
    <entry     value="1"        name="New_Tag_Visible"/>
    <entry     value="2"        name="Tag_Not_Visible"/>
    <entry     value="3"        name="Tag_Visibility_Changed"/>
  </customEnumerationDefinition>

  
  <!-- Parameter used to set tag reporting mode -->
  <customParameterDefinition      name="MotoROReportTrigger"
                                  vendor="moto" subtype="125"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is an extension of the ROReportTrigger. This parameter allows the user to configure report triggers outside the standard ROReportTriggers supported in LLRP. 
		  Moto_Upon_N_Seconds_Or_End_Of_AISpec or Moto_Upon_N_Seconds_Or_End_Of_ROSpec can be specified only if the ROReportSpec ROReportTriggerType is None 
        </intro>
        <field name="MotoReportTrigger" description="Motorola custom report trigger to facilitate user to control reporting of tags outside the standard ROReportTriggers supported in LLRP.
		Currently supports periodic reporting of tags if the tag is continued to be read after the period has elapsed. The following restrictions are applicable when using a periodic report trigger on the reader.
		1. Access Operation results will not be sent as part of the periodic report trigger and the reader sends an exception event when access operations are added with reader
		configured for periodic reporting of tags.
		2. AISpec stop trigger of type TagObservationTrigger with 'Upon_Seeing_N_Tags_Or_Timeout' is not supported with the reader configured for periodic reporting of tags.
		3. Phase reported back will be 0 for the tags that are reported periodically.
		"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u8"       name="MotoReportTrigger"
                                  enumeration="MotoReportTriggerType"/>
    <allowedIn    type="ROReportSpec" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for choosing report format -->
  <customEnumerationDefinition    name="MotoReportTriggerType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Controls tag event reporting or specifies format of the report.</intro>
        <enum Value="0" Definition="Moto_None; No Moto Trigger condition"/>
        <enum Value="1" Definition="Moto_Upon_N_Seconds_Or_End_Of_AISpec; Tag will be Reported immediately upon Read and will be reported only after N seconds Specified if tag is reading continuously. The Tags that are read will also be reported at the end of AISpec.  This setting can be used to reduce the traffic to the Host,  value of N will be taken from RO Report N. If N = 0 tags will be reported at the end of AISpec."/>
        <enum Value="2" Definition="Moto_Upon_N_Seconds_Or_End_Of_ROSpec; Tag will be Reported immediately upon Read and will be reported only after N seconds Specified if tag is reading continuously. The Tags that are read will also be reported at the end of ROSpec.  This setting can be used to reduce the traffic to the Host,  value of N will be taken from RO Report N. If N = 0 tags will be reported at the end of ROSpec."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
	<entry     value="0"    	name="Moto_None"/>
	<entry     value="1"    	name="Moto_Upon_N_Seconds_Or_End_Of_AISpec"/>
    <entry     value="2"    	name="Moto_Upon_N_Seconds_Or_End_Of_ROSpec"/>
  </customEnumerationDefinition>
  
  <!-- This parameter is used to request C1G2 capabilities -->
  <customParameterDefinition      name="MotoC1G2LLRPCapabilities"
                                  vendor="moto" subtype="400"
                                  namespace="moto">
    <annotation>
      <documentation>
        <notes>
          This parameter reports reader's capability to support C1G2 v1.2 extensions. It is a custom extension to GET_READER_CAPABILITIES_ RESPONSE. It is sent from reader to client as custom parameter to GET_READER_CAPABILITIES_RESPONSE message when the client issues a GET_READER_CAPABILITIES_REQUEST with custom reporting of C1G2 v1.2 capabilities enabled (refer <a href="#MotoGeneralRequestCapabilities"></a>). <br/>
          If CanSupportBlockPermalock is TRUE, reader supports C1G2 block perma-lock command. If CanSupportRecommissioning is TRUE, reader supports C1G2 tag re-commissioning function. If CanWriteUMI is true reader supports writing User Memory Indicator bit. If CanSupportNXPCustomCommands is TRUE, reader supports
          NXP Custom commands.If CanSupportFujitsuCustomCommands is TRUE, reader supports Fujitsu Custom commands.
        </notes>
        <field name="Version" description="Version of custom capability."/>
        <field name="CanSupportBlockPermalock" abbreviatedName="B" expandedName="Can Support BlockPermaLock"
             description="If true, reader supports BlockPermaLock command; false otherwise."/>
        <field name="CanSupportRecommissioning" abbreviatedName="R" expandedName="Can Support Tag Recommissioning"
             description="If true, reader supports tag recommissioning; false otherwise."/>
        <field name="CanWriteUMI" abbreviatedName="U" expandedName="Can Support Writing User Memory Indicator Bit"
             description="If true, reader supports writing User Memory Bit; false otherwise"/>
        <field name="CanSupportNXPCustomCommands" abbreviatedName="N" expandedName="Can Support NXP Custom commands"
             description="If true, reader supports NXP Custom commands; false otherwise"/>
        <field name="CanSupportFujitsuCustomCommands" abbreviatedName="F" expandedName="Can Support Fujitsu Custom commands"
             description="If true, reader supports Fujitsu Custom commands; false otherwise"/>
        <field name="CanSupportImpinjCustomCommands" abbreviatedName="I" expandedName="Can Support Impinj Custom commands"
             description="If true, reader supports Impinj Custom commands; false otherwise"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u32"       name="Version"/>
    <field        type="u1"       name="CanSupportBlockPermalock"/>
    <field        type="u1"       name="CanSupportRecommissioning"/>
    <field        type="u1"       name="CanWriteUMI"/>
    <field        type="u1"       name="CanSupportNXPCustomCommands"/>
    <field        type="u1"       name="CanSupportFujitsuCustomCommands"/>
    <field        type="u1"       name="CanSupportImpinjCustomCommands"/>
    <reserved     bitCount="2"/>
    <allowedIn    type="GET_READER_CAPABILITIES_RESPONSE"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter extends PC word-->
  <customParameterDefinition      name="MotoC1G2ExtendedPC"
                                  vendor="moto" subtype="450"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a custom extension to TagReportData. This parameter is reported only when enablePC field is set to TRUE in the C1G2EPCMemorySelector parameter. It is reported along with the PC in the tag report if XPC data is transmitted by tag during inventory.
        </intro>
        <field name="XPC" description="XPC1 word is most significant word position followed by XPC2 word."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u16v"  name="XPC" format="Hex"/>
    <allowedIn    type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a recommissioning OpSpec-->
  <customParameterDefinition      name="MotoC1G2Recommission"
                                  vendor="moto" subtype="451"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 OpSpec parameter. And, it can be used in AccessSpecs just like any other OpSpec parameter. It is used for tag re-commissioning. At the reader this parameter is translated into the C1G2 Kill command with re-commissioning bits (tags are not killed). Refer Class 1 Gen2 V1.2 kill command specification for more details. This command is honored by the reader when <a href="#MotoC1G2LLRPCapabilities">CanSupportRecommissioning</a> is reported as TRUE by the reader in GET_READER_CAPABILITIES_RESPONSE
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field name="KillPassword" description="The kill password is re-used for re-commissioning"/>
        <field name="Operation" description="It determines the re-commissioning type or mode"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="KillPassword" />
    <field   type="u8"    name="Operation" enumeration="MotoC1G2RecommissionOperation"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <!-- define enumeration for recom operations -->
  <customEnumerationDefinition    name="MotoC1G2RecommissionOperation"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of valid re-commissioning operations:</intro>
        <enum Value="1" Definition="Recom undoing and disabling block permalock functions"/>
        <enum Value="2" Definition="Recom disabling user memory"/>
        <enum Value="3" Definition="Same as 2 above"/>
        <enum Value="4" Definition="Recom unlocking mem (undoing lock cmd) and making kill and access passwords permanently unreadable"/>
        <enum Value="5" Definition="Combines 1 and 4 functions from above"/>
        <enum Value="6" Definition="Combines 2 and 4 function from above"/>
        <enum Value="7" Definition="Same as 6 above"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="1"        name="Undo_And_Disable_Block_Permalock"/>
    <entry     value="2"        name="Disable_User_Memory"/>
    <entry     value="3"        name="Disable_User_Memory_2ndOption"/>
    <entry     value="4"        name="Undo_Lock_And_Make_Passwords_Unreadable"/>
    <entry     value="5"        name="Undo_And_Disable_Block_Permalock_And_Undo_Lock_And_Make_Passwords_Unreadable"/>
    <entry     value="6"        name="Disable_User_Memory_And_Undo_Lock_And_Make_Passwords_Unreadable"/>
    <entry     value="7"        name="Disable_User_Memory_And_Undo_Lock_And_Make_Passwords_Unreadable_2ndOption"/>
  </customEnumerationDefinition>

  <!-- This parameter defines a recommissioning OpSpec response -->
  <customParameterDefinition      name="MotoC1G2RecommissionOpSpecResult"
                                  vendor="moto" subtype="452"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 OpSpec result parameter. This parameter returns the result of <a href="#MotoC1G2Recommission">MotoC1G2Recommission</a> within TagReportData parameter
        </intro>
        <field name="Result" description="Result of recommissioning."/>
        <field name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoC1G2RecommissionOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for recom operations -->
  <customEnumerationDefinition    name="MotoC1G2RecommissionOpSpecResultType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Success"/>
        <enum Value="1" Definition="Zero kill password error"/>
        <enum Value="2" Definition="Insufficient power to perform kill operation"/>
        <enum Value="3" Definition="Non-specific tag error"/>
        <enum Value="4" Definition="No response from tag"/>
        <enum Value="5" Definition="Non-specific reader error"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"    name="Success"/>
    <entry     value="1"    name="Zero_Kill_Password_Error"/>
    <entry     value="2"    name="Insufficient_Power"/>
    <entry     value="3"    name="Nonspecific_Tag_Error"/>
    <entry     value="4"    name="No_Response_From_Tag"/>
    <entry     value="5"    name="Nonspecific_Reader_Error"/>
  </customEnumerationDefinition>

  <!-- This parameter defines opSpec for C1G2 block permalock-->
  <customParameterDefinition      name="MotoC1G2BlockPermalock"
                                  vendor="moto" subtype="453"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 OpSpec. And, it can be used in AccessSpecs just like any other OpSpec parameter. It enables support for block perma-lock command. This command is honored only when reader sets CanSupportBlockPermalock parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message. If ReadLock is zero, content of Mask is ignored. If ReadLock is set, Mask should contain a bit mask specifying the blocks to perma-lock. In addition, if ReadLock is set, the bit mask size is obtained from the Mask array size and ReadBlockRange is ignored. Note that neither ReadBlockRange nor Mask is optional. They must be included even though they can be ignored by the reader depending on the value of ReadLock.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AccessPassword" description="Access Password."/>
        <field   name="MB" abbreviatedName="MB" expandedName="Memory Bank" description="Memory Bank specifying whether BlockPermaLock applied to EPC, TID or User memory."/>
        <field name="ReadLock" abbreviatedName="R" expandedName="Read Lock"
             description="If false, read the permalock status; if true do permalock."/>
        <field   name="BlockPointer" description="Block Pointer specifying start address of mask"/>
        <field   name="ReadBlockRange" description="Block Range specifying range of mask"/>
        <field   name="Mask" description="Mask specifying which memory blocks in tag need to be permalocked"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u32"   name="AccessPassword"/>
    <field     type="u2"    name="MB"/>
    <field     type="u1"    name="ReadLock"/>
    <reserved  bitCount="5"/>
    <field     type="u16"   name="BlockPointer"/>
    <field     type="u16"   name="ReadBlockRange"/>
    <field     type="u16v"  name="Mask" format="Hex"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a block permalock OpSpec response -->
  <customParameterDefinition      name="MotoC1G2BlockPermalockOpSpecResult"
                                  vendor="moto" subtype="454"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 OpSpec result parameter. This parameter returns the result of <a href="#MotoC1G2BlockPermalock">MotoC1G2BlockPermalock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of BlockPermaLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="Status"  description="Returns bit mask status bit when ReadLock is used as zero"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoC1G2BlockPermalockOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u16v"  name="Status" format="Hex"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for recom operations -->
  <customEnumerationDefinition    name="MotoC1G2BlockPermalockOpSpecResultType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Success"/>
        <enum Value="1" Definition="Insufficient power to perform lock operation"/>
        <enum Value="2" Definition="Non-specific tag error"/>
        <enum Value="3" Definition="No response from tag"/>
        <enum Value="4" Definition="Non-specific reader error"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"    name="Success"/>
    <entry     value="1"    name="Insufficient_Power"/>
    <entry     value="2"    name="Nonspecific_Tag_Error"/>
    <entry     value="3"    name="No_Response_From_Tag"/>
    <entry     value="4"    name="Nonspecific_Reader_Error"/>
  </customEnumerationDefinition>

  <!-- This parameter defines opSpec for NXP ChangeEAS-->
  <customParameterDefinition      name="MotoNXPChangeEAS"
                                  vendor="moto" subtype="455"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 OpSpec parameter. It enables support for NXP custom changeEAS command. This command is honored only when reader sets CanSupportNXPCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message. CanSupportNXPCustomCommands parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertise as false by the reader, the reader shall return an error message. The response to the Change EAS OPSpec shall be the presence of <a href="#MotoNXPChangeEASOpSpecResult">MotoNXPChangeEASOpSpecResult</a> in the Tag Report indicating the result of the Change EAS operation. Once the EAS State is set on a tag the tag will backscatter alarm code for the EAS Alarm request.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AccessPassword" description="Access Password."/>
        <field name="EASState" abbreviatedName="E" expandedName="EAS State to be set"
         description="If true, set the EAS flag on the chosen tags else reset the EAS flag."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u32"   name="AccessPassword"/>
    <field     type="u1"    name="EASState"/>
    <reserved  bitCount="7"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a NXP Change EAS OpSpec response -->
  <customParameterDefinition      name="MotoNXPChangeEASOpSpecResult"
                                  vendor="moto" subtype="456"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoNXPChangeEAS">MotoNXPChangeEAS</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of NXPChangeEAS."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoNXPOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines opSpec for NXP SetQuiet-->
  <customParameterDefinition      name="MotoNXPSetQuiet"
                                  vendor="moto" subtype="457"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 OpSpec parameter. It enables support for NXP custom SetQuiet command. This command is honored only when reader sets CanSupportNXPCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message. CanSupportNXPCustomCommands parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertise as false by the reader, the reader shall return an error message. The response to the SetQuiet OPSpec shall be the presence of <a href="#MotoNXPSetQuietOpSpecResult">MotoNXPSetQuietOpSpecResult</a> in the Tag Report indicating the result of the SetQuiet operation. Once a set quiet is performed on the tag, the tag shall overrule all memory data and EPC CRC's with Zero. No Access operation will work on the tag.

        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AccessPassword" description="Access Password."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u32"   name="AccessPassword"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a NXP SetQuiet OpSpec response -->
  <customParameterDefinition      name="MotoNXPSetQuietOpSpecResult"
                                  vendor="moto" subtype="458"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoNXPSetQuiet">MotoNXPSetQuiet</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of NXPChangeEAS."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoNXPOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines opSpec for NXP ResetQuiet-->
  <customParameterDefinition      name="MotoNXPResetQuiet"
                                  vendor="moto" subtype="459"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 OpSpec parameter. It enables support for NXP custom ResetQuiet command. This command is honored only when reader sets CanSupportNXPCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message. CanSupportNXPCustomCommands parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertise as false by the reader, the reader shall return an error message. The response to the ResetQuiet OPSpec shall be the presence of <a href="#MotoNXPResetQuietOpSpecResult">MotoNXPResetQuietOpSpecResult</a> in the Tag Report indicating the result of the ResetQuiet operation. A successful reset quiet operation shall open the tag for inventory and access operations.

        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AccessPassword" description="Access Password."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u32"   name="AccessPassword"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a NXP ResetQuiet OpSpec response -->
  <customParameterDefinition      name="MotoNXPResetQuietOpSpecResult"
                                  vendor="moto" subtype="460"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoNXPResetQuiet">MotoNXPResetQuiet</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of NXPChangeEAS."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoNXPOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for NXP OpSpec result -->
  <customEnumerationDefinition    name="MotoNXPOpSpecResultType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Success"/>
        <enum Value="1" Definition="Insufficient power to perform custom operation"/>
        <enum Value="2" Definition="Non-specific tag error"/>
        <enum Value="3" Definition="No response from tag"/>
        <enum Value="4" Definition="Non-specific reader error"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"    name="Success"/>
    <entry     value="1"    name="Insufficient_Power"/>
    <entry     value="2"    name="Nonspecific_Tag_Error"/>
    <entry     value="3"    name="No_Response_From_Tag"/>
    <entry     value="4"    name="Nonspecific_Reader_Error"/>
  </customEnumerationDefinition>

  <!-- This parameter defines opSpec for NXP Calibrate-->
  <customParameterDefinition      name="MotoNXPCalibrate"
                                  vendor="moto" subtype="461"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 OpSpec parameter. It enables support for NXP custom Calibrate command. This command is honored only when reader sets CanSupportNXPCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message. CanSupportNXPCustomCommands parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertise as false by the reader, the reader shall return an error message. response to the Calibrate OPSpec shall be the presence of <a href="#MotoNXPCalibrateOpSpecResult">MotoNXPCalibrateOpSpecResult</a> in the Tag Report indicating the result of the calibrate operation. The reader shall send back 512 bits (looped) of user memory data in the calibrate opspec result on success.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AccessPassword" description="Access Password."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u32"   name="AccessPassword"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a NXP Calibrate OpSpec response -->
  <customParameterDefinition      name="MotoNXPCalibrateOpSpecResult"
                                  vendor="moto" subtype="462"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoNXPCalibrate">MotoNXPCalibrate</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of NXPChangeEAS."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="ReadData"  description="Data returned by the calibrate command. The first 512 bits."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoNXPOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u16v"  name="ReadData" format="Hex"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoNXPEASAlarmSpec"
                                  vendor="moto" subtype="463"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom Spec in LLRP InventoryParameter Spec. It enables support for NXP custom EAS Alarm command. This command shall be honored only when reader sets CanSupportNXPCustomCommands parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertise as false by the reader, the reader shall return an error message. The presence of this parameter shall allow the reader to use the InventoryParameterSpec to perform EAS Alarm operation on the specified subset of antennas (among the antennas specified in AISpec). On the other antennas (specified in the AISpec) the reader will perform inventory. If an antenna is specified in MotoNXPEASAlarmSpec but not in AISpec, then EAS Alarm is not performed on this antenna. The EAS alarm does not use the C1G2TagInventoryMask specified in the antenna configuration to filter the tags (for sending alarms). The response to the EAS Alarm shall be a custom notification data of type <a href="#MotoNXPEASAlarmNotification">MotoNXPEASAlarmNotification</a>. This shall be sent back in the LLRP ReaderEventNotificationData parameter.
        </intro>
        <field   name="AntennaIDs" description="Antenna IDs on which to perform the EAS Alarm operation. If set to zero, this EAS Alarm spec will utilize all the antennas specified in the AISpec. If not EAS Alarm is performed in the subset of antennas of AISpec as indicated by this field."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16v"  name="AntennaIDs"/>
    <allowedIn type="InventoryParameterSpec" repeat="0-1"/>
  </customParameterDefinition>

  <!--  Response parameter for MOTO_NXP_EAS_ALARM request -->
  <customParameterDefinition      name="MotoNXPEASAlarmNotification"
                                  vendor="moto" subtype="464"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a Custom reader event notification data parameter. This parameter is returned when an Alarm code is returned in response to the <a href="#MotoNXPEASAlarm">MotoNXPEASAlarm</a> request.
        </intro>
        <field   name="EASAlarmCode" description="EAS Alarm code returned by a tag."/>
        <param type="AntennaID" description="Specifies the antenna on which the tag which responded with EAS Alarm code was seen. Refer LLRP specification for definition of AntennaID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u64"   name="EASAlarmCode"/>
    <parameter repeat="0-1" type="AntennaID"/>
    <allowedIn type="ReaderEventNotificationData" repeat="0-1"/>
  </customParameterDefinition>

  <!--  Addition error parameter for connection failure when region is not set.-->
  <customEnumerationDefinition    name="MotoConnectionErrorType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Unknown error"/>
        <enum Value="1" Definition="Region not configured error"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"    name="Unknown_error"/>
    <entry     value="1"    name="Region_Not_Configured_error"/>
  </customEnumerationDefinition>

  <customParameterDefinition      name="MotoConnectionFailureReason"
                                  vendor="moto" subtype="465"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a Custom reader event notification data parameter.  This is the additional error information sent to the client when connection to the reader fails with status code value 3 (Failed (any reason other than a connection already exists) in ConnectionAttemptEvent.
        </intro>
        <field   name="ErrorCode" description="Error code describing the additional information for LLRP connection request failure."/>
        <field   name="ErrorDescription" description="String describing the reason and additional information for LLRP connection request failure."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field        type="u8"       name="ErrorCode"
                                  enumeration="MotoConnectionErrorType"/>
    <field     type="utf8v" name="ErrorDescription" format="UTF8"/>
    <allowedIn type="ReaderEventNotificationData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter is used to enable or disable specific custom command options-->
  <customParameterDefinition      name="MotoCustomCommandOptions"
                                  vendor="moto" subtype="466"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is used to enable or disable specific custom command options. It is sent as a custom parameter to SET_READER_CONFIG message.
          Current custom options state can be retrieved from GET_READER_CONFIG_ RESPONSE by client by requesting reporting of corresponding custom parameter in GET_READER_CONFIG message.
        </intro>
        <field name="EnableNXPSetAndResetQuietCommands" abbreviatedName="Q" expandedName="NXP Set Quiet and Reset Quiet Command enable option" description="If true, then the NXP commands SetQuiet and ResetQuiet are enabled on the reader. The NXP tags that are set quiet will have 0 EPC and 0 CRC. This option needs to be enabled to use NXP Set and Reset Quiet commands on the reader. The default state of this option is disabled and the reader will report Unsupported parameter when  MotoNXPSetQuiet and MotoNXPResetQuiet Opspecs are included in the AccessSpec."/>
      </documentation>
      <description copyright="">
        Note: NXP Set Quiet Tag and Reset Quiet commands are disabled by default on the reader.
      </description>
    </annotation>
    <field        type="u1"       name="EnableNXPSetAndResetQuietCommands"/>
    <reserved     bitCount="31"/>
    <allowedIn    type="GET_READER_CONFIG_RESPONSE" repeat="0-1"/>
    <allowedIn    type="SET_READER_CONFIG"        	repeat="0-1"/>
  </customParameterDefinition>

  <!--This Custom parameter defines OpSpec for Fujitsu's ChangeWordLock command -->
  <customParameterDefinition      name="MotoFujitsuChangeWordLock"
                                  vendor="moto" subtype="467"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 OpSpec parameter. It enables support for Fujitsu's custom changeWordLock command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the ChangeWordLock OPSpec shall be the presence of <a href="#MotoFujitsuChangeWordLockOpSpecResult">MotoFujitsuChangeWordLockOpSpecResult</a> in the Tag Report indicating the result of the ChangeWordLock operation.
          ChangeWordLock can set/reset the wordLock flags of upto two consecutive words.If a Word's WordLock flag is set to high,
          the Word will be prevented from any future Writes until the WordLock flag is reset to low.This operation is secured by the password for enclosing Block Group and is currently supported only for Words in User Memory Bank.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="WordPointer" description="Specifies the Word-Offset for the words to be locked"/>
        <field   name="MB" abbreviatedName="MB" expandedName="Memory Bank" description="Specifies which Memory Bank contains the word(s) to be locked."/>
        <field   name="PayloadMask" abbreviatedName="MS" expandedName="Change Word Lock Pay Load Mask" description="A 2 bit pattern that specifies whether the lock action is to be applied or ignored for each of the two words"/>
        <field   name="PayloadAction" abbreviatedName="AC" expandedName="Change Word Lock Pay Load Action" description ="A 2 bit pattern that species the lock action for each of the two consecutive words at the wordPointer"/>
        <field   name="BlockGroupPassword" description ="Password of the BlockGroup enclosing the word(s) to be locked"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u16"   name="WordPointer"/>
    <field   type="u2"    name="MB"/>
    <field   type="u2"    name="PayloadMask"/>
    <field   type="u2"    name="PayloadAction"/>
    <reserved bitCount="2"/>
    <field   type="u32"   name="BlockGroupPassword"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu ChangeWordLock OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuChangeWordLockOpSpecResult"
                                  vendor="moto" subtype="468"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuChangeWordLock">MotoFujitsuChangeWordLock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command ChangeWordLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for Fujitsu OpSpec result -->
  <customEnumerationDefinition    name="MotoFujitsuOpSpecResultType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Success"/>
        <enum Value="1" Definition="Insufficient power to perform custom operation"/>
        <enum Value="2" Definition="Non-specific tag error"/>
        <enum Value="3" Definition="No response from tag"/>
        <enum Value="4" Definition="Non-specific reader error"/>
        <enum Value="5" Definition="Tag Memory Overrun error"/>
        <enum Value="6" Definition="Tag Memory Locked error"/>
      </documentation>
      <description copyright=""/>
    </annotation>
    <entry     value="0"    name="Success"/>
    <entry     value="1"    name="Insufficient_Power"/>
    <entry     value="2"    name="Nonspecific_Tag_Error"/>
    <entry     value="3"    name="No_Response_From_Tag"/>
    <entry     value="4"    name="Nonspecific_Reader_Error"/>
    <entry     value="5"    name="Tag_Memory_Overrun_Error"/>
    <entry     value="6"    name="Tag_Memory_Locked_Error"/>
  </customEnumerationDefinition>

  <!--This Custom parameter defines OpSpec for Fujitsu's ChangeBlockLock command -->
  <customParameterDefinition      name="MotoFujitsuChangeBlockLock"
                                  vendor="moto" subtype="469"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom ChangeBlockLock command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the ChangeBlockLockOPSpec shall be the presence of
          <a href="#MotoFujitsuChangeBlockLockOpSpecResult">MotoFujitsuChangeBlockLockOpSpecResult</a> in the Tag Report indicating the result of the ChangeBlockLock operation.
          Every 'Block' of Fujitsu tag has 'BlockLock' flag which when set to high, ensures that any unlocked Words inside the 'Block' will be Write locked after a Write operation to that Word.In otherwords,any Word inside the 'Block' whose 'WordLock' flag is deasserted will be set
          to high after a Write Operation ,provided the 'BlockLock' flag for the enclosing 'Block' is set to high.
          The states of 'BlockLock' flags for all the blocks inside a 'BlockGroup' can be changed through MotoFujitsuChangeBlockLock OPSpec.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="BlockGroupPointer"  abbreviatedName="BP" expandedName="Block Group Pointer" description="Specifies the Offset for the BlockGroup whose blocks shall be Block-locked"/>
        <field   name="PayloadMask"  description="Specifies for which blocks of the BlockGroup,the BlockLock action will have to applied"/>
        <field   name="PayloadAction" description="Specifies which of the blocks need to be acted on and the lock-action needed on them"/>
        <field   name="BlockGroupPassword" description ="Password of the enclosing BlockGroup"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="BlockGroupPointer"/>
    <field   type="u16"   name="PayloadMask" format="Hex"/>
    <field   type="u16"   name="PayloadAction" format="Hex"/>
    <field   type="u32"   name="BlockGroupPassword"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu ChangeBlockLock OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuChangeBlockLockOpSpecResult"
                                  vendor="moto" subtype="470"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuChangeBlockLock">MotoFujitsuChangeBlockLock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command ChangeBlockLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>


  <!-- This parameter defines an OpSpec for Fujitsu's custom command ReadBlockLock-->
  <customParameterDefinition      name="MotoFujitsuReadBlockLock"
                                  vendor="moto" subtype="471"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom ReadBlockLock command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the ReadBlockLockOPSpec shall be the presence of
          <a href="#MotoFujitsuReadBlockLockOpSpecResult">MotoFujitsuReadBlockLockOpSpecResult</a> in the Tag Report indicating the result of the ReadBlockLock operation.
          'ReadBlockLock' operation reads the block-lock status of the 'blocks' inside the specified blockgroup.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field   name="BlockGroupPointer"  abbreviatedName="BP" expandedName="Block Group Pointer" description="Specifies the Offset for the BlockGroup whose blocks shall be operated on"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="BlockGroupPointer"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu ReadBlockLock OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuReadBlockLockOpSpecResult"
                                  vendor="moto" subtype="472"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuReadBlockLock">MotoFujitsuReadBlockLock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command ReadBlockLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="BlockLockStatus" description="A 16-bit pattern indicating the block-status of each of the 16 blocks inside the specified Block Group"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u16"   name="BlockLockStatus" format="Hex"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines an OpSpec for Fujitsu's custom command ChangeBlockGroupPassword or ChangeAreaGroupPassword-->
  <customParameterDefinition      name="MotoFujitsuChangeBlockOrAreaGroupPassword"
                                  vendor="moto" subtype="473"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom ChangeBlockGroupPassword or ChangeAreaGroupPassword command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the ChangeBlockOrAreaGroupPasswordOPSpec shall be the presence of
          <a href="#MotoFujitsuChangeBlockOrAreaGroupPasswordOpSpecResult">MotoFujitsuChangeBlockOrAreaGroupPasswordOpSpecResult</a> in the Tag Report indicating the result of the ChangeBlockOrAreaGroupPassword operation.'ChangeBlockOrAreaGroupPassword' operation changes the password of the specified BlockGroup or AreaGroup. It is secured by the current BlockGroup or AreaGroup Password.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field   name="BlockOrAreaGroupPointer"  abbreviatedName="BA" expandedName="Block or Area Group Pointer" description="Specifies the Offset for the Block or Area Group to be operated on"/>
        <field name="currentPassword" description="current BlockGroup Password"/>
        <field name="newPassword" description="new BlockGroup Password"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>

    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="BlockOrAreaGroupPointer" />
    <field   type="u32"   name="currentPassword"/>
    <field   type="u32"   name="newPassword"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <!-- This parameter defines the response for Fujitsu ChangeBlockGroupPssword or ChangeAreaGroupPassword OpSpec -->
  <customParameterDefinition      name="MotoFujitsuChangeBlockOrAreaGroupPasswordOpSpecResult"
                                  vendor="moto" subtype="474"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuChangeBlockOrAreaGroupPassword">MotoFujitsuChangeBlockOrAreaGroupPassword</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command ChangeBlockOrAreaGroupPassword."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines an OpSpec for Fujitsu's custom command BurstWrite-->
  <customParameterDefinition      name="MotoFujitsuBurstWrite"
                                  vendor="moto" subtype="475"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom BurstWrite command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the BurstWriteOPSpec shall be the presence of <a href="#MotoFujitsuBurstWriteOpSpecResult">MotoFujitsuBurstWriteOpSpecResult</a> in the Tag Report indicating the result of the BurstWrite operation.
          'BurstWrite' operation writes even number of words and returns the number of words unsuccessfully written.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field name="Access Password" description="Access Password"/>
        <field name="MB" description="Memory Bank"/>
        <field name="WordPointer" description="Word Offset, must be an even number"/>
        <field name="BurstWriteData" description="Data to be Written, must have an even length"/>

      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="AccessPassword"/>
    <field   type="u2"    name="MB"/>
    <reserved bitCount="14"/>
    <field   type="u16"   name="WordPointer"/>
    <reserved bitCount="16"/>
    <field   type="u16v"  name="BurstWriteData" format="Hex" />
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <!-- This parameter defines the response for Fujitsu BurstWrite OpSpec -->
  <customParameterDefinition      name="MotoFujitsuBurstWriteOpSpecResult"
                                  vendor="moto" subtype="476"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuBurstWrite">MotoFujitsuBurstWrite</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command BurstWrite"/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="WordsNotWritten" description="Number of words unsuccessfully written"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u8"    name="WordsNotWritten"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>


  <!-- This parameter defines an OpSpec for Fujitsu's custom command BurstErase-->
  <customParameterDefinition      name="MotoFujitsuBurstErase"
                                  vendor="moto" subtype="477"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom BurstErase command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the BurstEraseOPSpec shall be the presence of <a href="#MotoFujitsuBurstEraseOpSpecResult">MotoFujitsuBurstEraseOpSpecResult</a> in the Tag Report indicating the result of the BurstWrite operation.
          'BurstErase' operation erases even number of words and returns the number of words unsuccessfully erased.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field name="Access Password" description="Access Password"/>
        <field name="MB" description="Memory Bank"/>
        <field name="WordPointer" description="Word Offset, must be an even number"/>
        <field name="WordCount" description="Number of words to be erased, must be even"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="AccessPassword"/>
    <field   type="u2"    name="MB"/>
    <reserved bitCount="6"/>
    <field   type="u16"   name="WordPointer"/>
    <field   type="u8"   name="WordCount"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <!-- This parameter defines the response for Fujitsu BurstErase OpSpec -->
  <customParameterDefinition      name="MotoFujitsuBurstEraseOpSpecResult"
                                  vendor="moto" subtype="478"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuBurstErase">MotoFujitsuBurstErase</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command BurstErase"/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="WordsNotErased" description="Number of words unsuccessfully erased"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field     type="u8"    name="WordsNotErased"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!--This Custom parameter defines OpSpec for Fujitsu's AreaReadLock command -->
  <customParameterDefinition      name="MotoFujitsuAreaReadLock"
                                  vendor="moto" subtype="479"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom AreaReadLock command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the AreaReadLockOPSpec shall be the presence of
          <a href="#MotoFujitsuAreaReadLockOpSpecResult">MotoFujitsuAreaReadLockOpSpecResult</a> in the Tag Report indicating the result of the AreaReadLock operation.
          The AreaReadLock command specifies the AreaReadLock status in the control memory with password.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AreaGroupPointer"  abbreviatedName="AP" expandedName="Area Group Pointer" description="Specifies the Offset for the AreaGroup whose area's shall be read locked"/>
        <field   name="AreaReadLockMask"  description="Specifies for which areas of the AreaGroup,the ReadLock action will have to applied. Bit value 0 indicates 'Ignore the associated Action field and retain the current setting' and 1 indicates 'Implement the associated Action field and overwrite the current
		AreaReadLock setting'"/>
        <field   name="AreaReadLockAction" description="Specifies the lock-action on the Areas as selected by the AreaReadLockMask. Bit value 0 indicates 'Deassert AreaReadLock' and 1 indicates 'Assert AreaReadLock'"/>
        <field   name="AreaGroupPassword" description ="Password of the enclosing AreaGroup"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="AreaGroupPointer"/>
    <field   type="u16"   name="AreaReadLockMask" format="Hex"/>
    <field   type="u16"   name="AreaReadLockAction" format="Hex"/>
    <field   type="u32"   name="AreaGroupPassword"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu AreaReadLock OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuAreaReadLockOpSpecResult"
                                  vendor="moto" subtype="480"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuAreaReadLock">MotoFujitsuAreaReadLock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command AreaReadLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!--This Custom parameter defines OpSpec for Fujitsu's AreaWriteLock command -->
  <customParameterDefinition      name="MotoFujitsuAreaWriteLock"
                                  vendor="moto" subtype="481"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom AreaWriteLock command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the AreaWriteLockOPSpec shall be the presence of
          <a href="#MotoFujitsuAreaWriteLockOpSpecResult">MotoFujitsuAreaWriteLockOpSpecResult</a> in the Tag Report indicating the result of the AreaWriteLock operation.
          The AreaWriteLock command specifies the AreaWriteLock status in the control memory with password.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AreaGroupPointer"  abbreviatedName="AP" expandedName="Area Group Pointer" description="Specifies the Offset for the AreaGroup whose area's shall be write locked"/>
        <field   name="AreaWriteLockMask"  description="Specifies for which areas of the AreaGroup,the WriteLock action will have to applied. Bit value 0 indicates 'Ignore the associated Action field and retain the current setting' and 1 indicates 'Implement the associated Action field and overwrite the current
		AreaWriteLock setting'"/>
        <field   name="AreaWriteLockAction" description="Specifies the lock-action on the Areas as selected by the AreaWriteLockMask. Bit value 0 indicates 'Deassert AreaWriteLock' and 1 indicates 'Assert AreaWriteLock'"/>
        <field   name="AreaGroupPassword" description ="Password of the enclosing AreaGroup"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="AreaGroupPointer"/>
    <field   type="u16"   name="AreaWriteLockMask" format="Hex"/>
    <field   type="u16"   name="AreaWriteLockAction" format="Hex"/>
    <field   type="u32"   name="AreaGroupPassword"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu AreaWriteLock OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuAreaWriteLockOpSpecResult"
                                  vendor="moto" subtype="482"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuAreaWriteLock">MotoFujitsuAreaWriteLock</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command AreaWriteLock."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!--This Custom parameter defines OpSpec for Fujitsu's AreaWriteLockWOPassword command -->
  <customParameterDefinition      name="MotoFujitsuAreaWriteLockWOPassword"
                                  vendor="moto" subtype="483"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for Fujitsu's custom AreaWriteLockWOPassword command. This command is honored only when reader sets CanSupportFujitsuCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.If this command is seen at the reader when CanSupportFujitsuCustomCommands parameter is advertised as false by the reader, the reader shall return an error message. The response to the AreaWriteLockWOPasswordOPSpec shall be the presence of
          <a href="#MotoFujitsuAreaWriteLockWOPasswordOpSpecResult">MotoFujitsuAreaWriteLockWOPasswordOpSpecResult</a> in the Tag Report indicating the result of the AreaWriteLockWOPassword operation.
          The AreaWriteLockWOPassword command can set the AreaWriteLock status in the control memory without password. This command can not reset the AreaWriteLock status
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="AreaGroupPointer"  abbreviatedName="AP" expandedName="Area Group Pointer" description="Specifies the Offset for the AreaGroup whose area's shall be write locked"/>
        <field   name="AreaWriteLockWOPasswordAction" description="Specifies the lock-action on the Areas in the group as specified by AreaGroupPointer. Bit value 0 indicates 'No Action' and 1 indicates 'Assert AreaWriteLock'"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u8"    name="AreaGroupPointer"/>
    <field   type="u16"   name="AreaWriteLockWOPasswordAction" format="Hex"/>
    <reserved bitCount="32"/>
    <allowedIn type="AccessCommand"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Fujitsu AreaWriteLockWOPassword OpSpec response -->
  <customParameterDefinition      name="MotoFujitsuAreaWriteLockWOPasswordOpSpecResult"
                                  vendor="moto" subtype="484"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoFujitsuAreaWriteLockWOPassword">MotoFujitsuAreaWriteLockWOPassword</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of Fujitsu custom command AreaWriteLockWOPassword."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoFujitsuOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for Moto OpSpec result -->
  <customEnumerationDefinition    name="MotoOpSpecResultType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="0" Definition="Success"/>
        <enum Value="1" Definition="Insufficient power to perform custom operation"/>
        <enum Value="2" Definition="Non-specific tag error"/>
        <enum Value="3" Definition="No response from tag"/>
        <enum Value="4" Definition="Non-specific reader error"/>
        <enum Value="5" Definition="Tag Memory Overrun error"/>
        <enum Value="6" Definition="Tag Memory Locked error"/>
      </documentation>
      <description copyright=""/>
    </annotation>
    <entry     value="0"    name="Success"/>
    <entry     value="1"    name="Insufficient_Power"/>
    <entry     value="2"    name="Nonspecific_Tag_Error"/>
    <entry     value="3"    name="No_Response_From_Tag"/>
    <entry     value="4"    name="Nonspecific_Reader_Error"/>
    <entry     value="5"    name="Tag_Memory_Overrun_Error"/>
    <entry     value="6"    name="Tag_Memory_Locked_Error"/>
  </customEnumerationDefinition>

  <!-- This parameter defines an OpSpec for NXP's custom command Change Config-->
  <customParameterDefinition      name="MotoNXPChangeConfig"
                                  vendor="moto" subtype="485"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter.
          It enables support for NXP's custom ChangeConfig command. This command is honored only when reader sets CanSupportNXPCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.
          If this command is seen at the reader when CanSupportNXPCustomCommands parameter is advertised as false by the reader, the reader shall return an error message.
          The response to the ChangeConfigOPSpec shall be the presence of <a href="#MotoNXPChangeConfigOpSpecResult">MotoNXPChangeConfigOpSpecResult</a> in the Tag Report indicating
          the result of the ChangeConfig operation.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field name="AccessPassword" description="Access Password"/>
        <field name="NXPChangeConfigWord" description="NXP Change Config Word."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="AccessPassword"/>
    <reserved  bitCount="8"/>
    <field   type="u16"   name="NXPChangeConfigWord" format="Hex"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <customParameterDefinition      name="MotoNXPChangeConfigOpSpecResult"
                                  vendor="moto" subtype="486"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoNXPChangeConfig">MotoNXPChangeConfig</a> within TagReportData parameter.
        </intro>
        <field   name="Result" description="Result of NXP custom command ChangeConfig."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field name="NXPChangeConfigWord" description="Current NXP Change Config Word. This is valid only when the Result of the operation is Success"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field   type="u16"   name="NXPChangeConfigWord" format="Hex"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines an OpSpec for Impinj's custom QT command-->
  <customParameterDefinition      name="MotoImpinjQT"
                                  vendor="moto" subtype="487"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter.
          It enables support for Impinj's custom QT command. This command is honored only when reader sets CanSupportImpinjCustomCommands parameter to TRUE in GET_READER_CAPABILITIES_RESPONSE message.
          If this command is seen at the reader when CanSupportImpinjCustomCommands parameter is advertised as false by the reader, the reader shall return an error message.
          The response to the MotoImpinjQT shall be the presence of <a href="#MotoImpinjQTOpSpecResult">MotoImpinjQTOpSpecResult</a> in the Tag Report indicating
          the result of the QT operation.
        </intro>
        <field name="OpSpecID" description="OpSpec ID."/>
        <field name="Access Password" description="Access Password"/>
        <field name="QT_Write" description="Indicates whether the QT command is called for read or write of the QT Control data"/>
        <field name="QT_Persist" description="Indicates whether the QT control is written to nonvolatile (NVM) or volatile memory"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="AccessPassword"/>
    <field   type="u1"   name="QT_Write"/>
    <field   type="u1"   name="QT_Persist"/>
    <reserved  bitCount="6"/>
    <parameter repeat="0-1" type="QTData"/>
    <allowedIn type="AccessCommand" repeat="0-1"    />
  </customParameterDefinition>

  <customParameterDefinition name="QTData"
                             vendor="moto" subtype="488"
                             namespace="moto">
    <annotation>
      <documentation>
      <intro>
        This parameter is a Custom parameter and can be used in MotoImpinjQT and  MotoImpinjQTOpSpecResult parameter.
        When used with MotoImpinjQT this parameter is used to set the QT  Control data for QT_Write Operation. This parameter is ignored when QT_Write is set to 0.
        When used with MotoImpinjQTOpSpecResult this parameter is used to indicate the current setting QT Control data when QT_Write is set to 0.
      </intro>
		<field name="QT_Control" description="QT Control bits. Bit 15 controls the Short Range Feature and Bit 14 Controls the Public or Private Memory Map."/>
      </documentation>
    </annotation>
    <field     type="u16"    name="QT_Control" format="Hex"/>
    <allowedIn type="MotoImpinjQT" repeat="0-1"/>
    <allowedIn type="MotoImpinjQTOpSpecResult" repeat="0-1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoImpinjQTOpSpecResult"
                                 vendor="moto" subtype="489"
                                 namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoImpinjQT">MotoImpinjQT</a> within TagReportData parameter.
        </intro>
        <field   name="Result" description="Result of Impinj custom command QT"/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field name="QT_Write" description="Indicates whether the QT command has been called for read or write of the QT Control data"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
	<field   type="u1"   name="QT_Write"/>
    <reserved  bitCount="7"/>
    <parameter repeat="0-1" type="QTData"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!--This Custom parameter defines a generic OpSpec to support custom command -->
  <customParameterDefinition      name="MotoGenericCustomOpSpec"
                                  vendor="moto" subtype="1010"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a C1G2 Custom OpSpec. And, it can be used in AccessSpecs just like any other C1G2 custom OPSpec parameter. It enables support for executing a custom command that is not yet supported as a separate opspec by the Motorola reader. The response to the MotoGenericCustomOpSpec shall be the presence of
          <a href="#MotoGenericCustomOpSpecResult">MotoGenericCustomOpSpecResult</a> in the Tag Report indicating the result of the GenericCustomOpSpec operation.
        </intro>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field name="Access Password" description="Access Password"/>
        <field   name="IsSecureMode"  abbreviatedName="S" expandedName="SecureMode" description="Specifies whether the custom command is to be used in secure mode on air"/>
        <field name="Gen2Command" description="Custom Gen2 command to be sent on air"/>
        <field name="ManufacturerID" description="Portion of the TID in the tag that represents the manufacturer ID. This can be used to filter the tag to perform the custom operation on by the manufacturer"/>
        <field name="GenericData" description="Generic Data to be sent as specified in the custom operation"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="OpSpecID"/>
    <field   type="u32"   name="AccessPassword"/>
    <field   type="u1"    name="IsSecureMode"/>
    <reserved bitCount="15"/>
    <field   type="u16"   name="Gen2Command" format="Hex"/>
    <field   type="u16"   name="ManufacturerID" format="Hex"/>
    <field   type="u32"   name="GenericData"  format="Hex"/>
    <reserved  bitCount="32"/>
    <reserved  bitCount="32"/>
    <choice       repeat="1-N"    type="MotoGenericParamSpec"/>
    <parameter    repeat="0-N"    type="MotoGenericResponseSpec"/>
    <allowedIn type="AccessCommand"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- Choice definition to choose one of the multiple time formats supported -->
  <customChoiceDefinition        name="MotoGenericParamSpec"
                                namespace="moto">
    <parameter type="MotoGenericParamData"/>
    <parameter type="MotoGenericParamValue"/>
  </customChoiceDefinition>

  <customParameterDefinition      name="MotoGenericParamData"
                                  vendor="moto" subtype="1011"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter and can be used in MotoGenericCustomOpSpec parameter. The data to be sent on air for a custom command is specified using this parameter. It is possible to use list of MotoGenericParamData in MotoGenericCustomOpSpec parameter.
        </intro>
        <field   name="NumberOfBits" description="Specified the number of bits of data."/>
        <field name="Data" description="Data for the custom command to be sent on air. This depends on the specific custom command."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field   type="u16"   name="NumberOfBits"/>
    <field   type="u16v"   name="Data" format="Hex"/>
    <allowedIn type="MotoGenericCustomOpSpec"  repeat="0-1"/>
  </customParameterDefinition>

  <customParameterDefinition      name="MotoGenericParamValue"
                                  vendor="moto" subtype="1012"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter and can be used in MotoGenericCustomOpSpec parameter. This parameter specifies more information about the custom command to the reader to facilitate the reader to send air protocol data in required format.
        </intro>
        <field   name="Parameter" description="Specifies information about the custom command."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"    name="Parameter"
                            enumeration="GenericParameterType"/>
    <reserved     bitCount="32"/>
    <allowedIn type="MotoGenericCustomOpSpec"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for GenericParameterType-->
  <customEnumerationDefinition    name="GenericParameterType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="1" Definition="Tag handle parameter"/>
        <enum Value="2" Definition="CRC parameter"/>
        <enum Value="3" Definition="DR parameter 1 bit"/>
        <enum Value="4" Definition="M parameter 1 bit"/>
        <enum Value="5" Definition="Trext parameter  1 bit"/>
        <enum Value="6" Definition="32 bit access password xor twice with handle"/>
        <enum Value="7" Definition="16 bit Config word xor'ed with handle"/>
      </documentation>
      <description copyright=""/>
    </annotation>
    <entry     value="1"    name="TAG_HANDLE_16"/>
    <entry     value="2"    name="CRC_16"/>
    <entry     value="3"    name="DR_1"/>
    <entry     value="4"    name="M_1"/>
    <entry     value="5"    name="TRExt_1"/>
    <entry     value="6"    name="AccessPassword_XOR_2_32"/>
    <entry     value="7"    name="CONFIG_XOR_16"/>
  </customEnumerationDefinition>


  <!--This Custom parameter defines a generic custom response parameter that indicates the expected response type for a custom command -->
  <customParameterDefinition      name="MotoGenericResponseSpec"
                                  vendor="moto" subtype="1013"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter and can be used in MotoGenericCustomOpSpec parameter. This parameter specifies how to handle the on air response for the custom command.
        </intro>
        <field   name="ResponseParameter" description="Information on handling on air response for the custom command."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"    name="ResponseParameter"
                            enumeration="GenericResponseSpecType"/>
    <reserved     bitCount="32"/>
    <allowedIn type="MotoGenericCustomOpSpec"  repeat="0-1"/>
  </customParameterDefinition>

  <!-- define enumeration for GenericResponseSpecType-->
  <customEnumerationDefinition    name="GenericResponseSpecType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>List of possible results:</intro>
        <enum Value="1" Definition="1 bit 0 if Success value"/>
        <enum Value="2" Definition="Validate the received handle with command handle"/>
        <enum Value="3" Definition="Validate the CRC on received data "/>
        <enum Value="4" Definition="Validate EAS Alarm code with crc5 and send alarm if present"/>
        <enum Value="5" Definition="Receive 512 bits of calibrate response"/>
        <enum Value="6" Definition="Receive 16 bits of data"/>
        <enum Value="7" Definition="Success Header 1"/>
      </documentation>
      <description copyright=""/>
    </annotation>
    <entry     value="1"    name="SUCCESS0"/>
    <entry     value="2"    name="HANDLE_VALIDATE"/>
    <entry     value="3"    name="CRC16_VALIDATE"/>
    <entry     value="4"    name="CRC5_VALIDATE_64"/>
    <entry     value="5"    name="CALIBRATE_USERDATA_512"/>
    <entry     value="6"    name="RECV_DATA_16"/>
    <entry     value="7"    name="SUCCESS0_HEADER_1"/>
  </customEnumerationDefinition>

  <!-- This parameter defines a Moto Generic Custom OpSpec response -->
  <customParameterDefinition      name="MotoGenericCustomOpSpecResult"
                                  vendor="moto" subtype="1014"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a C1G2 Custom OpSpec result parameter. This parameter returns the result of <a href="#MotoGenericCustomOpSpec">MotoGenericCustomOpSpec</a> within TagReportData parameter
        </intro>
        <field   name="Result" description="Result of custom command MotoGenericCustomOpSpec."/>
        <field   name="OpSpecID" description="OpSpec ID."/>
        <field   name="Data" description="Data returned for the custom opspec. The value of this depends on the specific custom command that is used in the opspec"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="u8"    name="Result"
                            enumeration="MotoOpSpecResultType"/>
    <field     type="u16"   name="OpSpecID"/>
    <field   type="u16v"   name="Data" format="Hex"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Moto Zone parameter -->
  <customParameterDefinition      name="Motozone"
                                  vendor="moto" subtype="700"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter in LLRP InventoryParameter Spec. This parameter allows mapping antennas / beams to a zone. The presence of this parameter makes this IPSpec a zone by itself and allows tag reports to contain the zone info when inventoried on this zone. This command shall be honored only when reader sets CanSupportZone parameter to true in GET_READER_CAPABILITIES_RESPONSE message. If this command is seen at the reader when CanSupportZone parameter is advertise as false by the reader, the reader shall return an error message.
        </intro>
        <field   name="ZoneID" description="Zone ID identifying this IPSpec as a zone. If set to zero, this is a special zone which is not really a zone and is treated as a regular IPSpec. Tags that are inventoried as part of this zone will not carry zone ID in the tag report."/>
        <field   name="ZoneName" description="ZoneName describing the zone."/>
        <field   name="AntennaIDs" description="Antenna IDs that make up this zone."/>		
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"  name="ZoneID"/>
    <field        type="utf8v"       name="ZoneName" format="UTF8"/>
    <field     type="u16v"  name="AntennaIDs"/>
    <allowedIn type="InventoryParameterSpec" repeat="0-1"/>
  </customParameterDefinition>  

  <!-- This parameter defines the zone inventory sequence entry. -->
  <customParameterDefinition      name="MotoZoneAntennaSequence"
                                  vendor="moto" subtype="701"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter holds information about the zone and antenna sequence to be used to perform inventory operation for this AISpec.</intro>
        <field   name="ZoneID" description="Zone ID identifying the zone that the antenna on which to inventory on."/>
        <field name="AntennaIDs" description="Antennas that belong to this zone on which to perform inventory in sequence as described by this field."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field     type="u16"  name="ZoneID"/>
    <field	      type="u16v"      name="AntennaIDs"/>
    <allowedIn type="MotoZoneAntennaSequenceList" repeat="1-N"/>
  </customParameterDefinition>

  <!-- This parameter defines the zone inventory sequence list for the AISpec. -->
  <customParameterDefinition      name="MotoZoneAntennaSequenceList"
                                  vendor="moto" subtype="702"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter has the zone based sequence list to perform inventory on for the AISpec.
        </intro>
	    <param type="MotoZoneAntennaSequence" description="MotoZoneAntennaSequence parameter"/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter    repeat="1-N"    type="MotoZoneAntennaSequence"/>
    <allowedIn    type="AISpec" repeat="0-1"/>
  </customParameterDefinition>  
  
  <!-- This parameter defines a Moto Antenna Config extension parameter -->
  <customParameterDefinition      name="MotoAntennaConfig"
                                  vendor="moto" subtype="703"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter in LLRP C1G2InventoryCommand. This parameter allows the user to specify antenna config extensions that allow finer control over the physical antenna configuration. Currently this parameter is added as part of C1G2InventoryCommand since the AntennaConfiguration does not support custom extensions currently.
        </intro>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <parameter repeat="0-1" type="MotoAntennaStopCondition"/>
    <parameter repeat="0-1" type="MotoAntennaPhysicalPortConfig"/>
    <parameter repeat="0-1" type="MotoAntennaQueryConfig"/>
    <allowedIn type="C1G2InventoryCommand" repeat="0-1"/>
  </customParameterDefinition>    

  <!-- This parameter defines a Moto Antenna stop condition extension parameter -->
  <customParameterDefinition      name="MotoAntennaStopCondition"
                                  vendor="moto" subtype="704"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter in LLRP C1G2InventoryCommand. This parameter allows the user to specify the stop condition for each a specific antenna. Currently this supports stop conditions based on the dwell time and number of inventory cycles.
        </intro>
        <field name="AntennaStopTrigger" description="Specifies the type of stop trigger used for this antenna."/>
        <field   name="AntennaStopConditionValue" description="Stop condition value used to stop inventory on the specific antenna. The value specified here depends on the stop trigger specified in the AntennaStopTrigger field. If the stop condition is Dwell_Time this value specifies the number of milliseconds for which inventory operation should be performed on the antenna. For stop condition of type Number_Inventory_Cycles this values specifies the number of rounds of inventory to be performed on this antenna."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field        type="u8"       name="AntennaStopTrigger"
                                  enumeration="MotAntennaStopTriggerType"/>
    <field     type="u16"  name="AntennaStopConditionValue"/>
    <allowedIn type="MotoAntennaConfig" repeat="0-1"/>
  </customParameterDefinition>  

  <!-- define enumeration for Anenna stop trigger type-->
  <customEnumerationDefinition    name="MotAntennaStopTriggerType"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>Specifies stop trigger types for an antenna</intro>
        <enum Value="0" Definition="Dwell_Time"/>
        <enum Value="1" Definition="Number_Inventory_Cycles"/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <entry     value="0"        name="Dwell_Time"/>
    <entry     value="1"        name="Number_Inventory_Cycles"/>
  </customEnumerationDefinition>

  <!-- This parameter defines a Moto Antenna physical port configuration extension parameter -->
  <customParameterDefinition      name="MotoAntennaPhysicalPortConfig"
                                  vendor="moto" subtype="705"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter in LLRP C1G2InventoryCommand. This parameter allows the user to specify the physical port configuration for the antenna.
        </intro>
        <field   name="PhysicalTransmitPort" description="Specifies the physical transmit port to be used for this antenna."/>
        <field   name="PhysicalReceivePort" description="Specifies the physical receive port to be used for this antenna."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u16"  name="PhysicalTransmitPort"/>
    <field     type="u16"  name="PhysicalReceivePort"/>
    <allowedIn type="MotoAntennaConfig" repeat="0-1"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>  
  
  <!-- This parameter defines the zone ID that this tag was inventoried on. -->
  <customParameterDefinition      name="MotoTagZoneID"
                                  vendor="moto" subtype="706"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter holds the zone ID that this tag was inventoried on.</intro>
        <field   name="ZoneID" description="Zone ID identifying the zone that the antenna on which this tag was inventoried belongs to."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field     type="u16"  	name="ZoneID"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines the zone ID that this tag was inventoried on. -->
  <customParameterDefinition      name="MotoTagZoneName"
                                  vendor="moto" subtype="707"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter holds the zone ID that this tag was inventoried on.</intro>
        <field   name="ZoneName" description="Zone Name identifying the zone that the antenna on which this tag was inventoried belongs to."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field     type="utf8v" name="ZoneName" format="UTF8"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>
  
  <customParameterDefinition      name="MotoTagReportContentSelector"
                                  vendor="moto" subtype="708"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter configures the optional parameters reported back as part of the tag report data. This is an optional sub-parameter in ROReportSpec parameter.<br/>
          Default event selector setting has new tag events and tag visibility change events set to be reported immediately and tag invisible events to be reported by a moderation timeout of 8 sec.
        </intro>
        <field name="EnableZoneID" abbreviatedName="I" expandedName="Enable ZoneID in TagReport" description="Enables reporting the ZoneID of the antenna that this tag was inventoried on. If the antenna is not part of any zone the zone ID not reported back even if this is set."/>
        <field name="EnableZoneName"  abbreviatedName="N" expandedName="Enable ZoneName in TagReport" description="Enables reporting the ZoneName of the antenna that this tag was inventoried on belongs to. If the antenna is not part of any zone the zone ID not reported back even if this is set."/>
        <field name="EnableAntennaPhysicalPortConfig"  abbreviatedName="P" expandedName="Enable Physical Port in TagReport" description="Enables reporting the physical port config of the antenna that this tag was inventoried on belongs to."/>
        <field name="EnablePhase"  abbreviatedName="S" expandedName="Enable Phase in TagReport" description="Enables reporting the Phase information on the antenna that this tag was inventoried on."/>
	  </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u1"    name="EnableZoneID"/>
    <field     type="u1"    name="EnableZoneName"/>
    <field     type="u1"    name="EnableAntennaPhysicalPortConfig"/>
    <field     type="u1"    name="EnablePhase"/>
	<reserved  bitCount="28"/>
    <allowedIn    type="ROReportSpec" repeat="0-1"/>  
  </customParameterDefinition>
  
  <!-- This parameter defines the Phase information for the tag was inventoried on. -->
  <customParameterDefinition      name="MotoTagPhase"
                                  vendor="moto" subtype="709"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>This parameter holds the phase information for the tag.</intro>
        <field   name="Phase" description="Phase information reported by the reader when this tag was seen."/>
      </documentation>
      <description>
      </description>
    </annotation>
    <field     type="s16" name="Phase"/>
    <allowedIn type="TagReportData" repeat="0-1"/>
  </customParameterDefinition>

  <!-- This parameter defines a Moto Antenna Query configuration extension parameter -->
  <customParameterDefinition      name="MotoAntennaQueryConfig"
                                  vendor="moto" subtype="710"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This parameter is a Custom parameter in LLRP C1G2InventoryCommand. This parameter allows the user to specify the SL all and A/B flip feature.
        </intro>
        <field   name="EnableSLAll"  abbreviatedName="S" expandedName="Enable SL All" description="Specifies Inventory all Tags irrespective of SL Flag for this antenna."/>
        <field   name="EnableABFlip"  abbreviatedName="B" expandedName="Enable AB Flip" description="Specifies  alternate inventory flag for this antenna during Inventory."/>
      </documentation>
      <description copyright="">
        <h:p></h:p>
      </description>
    </annotation>
    <field     type="u1"    name="EnableSLAll"/>
    <field     type="u1"    name="EnableABFlip"/>
	<reserved  bitCount="14"/>
    <allowedIn type="MotoAntennaConfig" repeat="0-1"/>
  </customParameterDefinition>



  <customParameterDefinition      name="MotoASCIIDebugInfo"
                                  vendor="moto" subtype="800"
                                  namespace="moto">
    <annotation>
      <documentation>
        <intro>
          This is a Custom reader event notification data parameter.  This is the asynchronous information sent from the reader when the same is sent from the radio.
        </intro>
        <field   name="ASCIIData" description="ASCII data sent from the Radio with appropriate information."/>
      </documentation>
      <description copyright="">
      </description>
    </annotation>
    <field     type="utf8v" name="ASCIIData" format="UTF8"/>
    <allowedIn type="ReaderEventNotificationData" repeat="0-1"/>
  </customParameterDefinition>
</llrpdef>
