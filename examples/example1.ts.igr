/**
 * This example program is an exact recreation of the example1.cpp found in the LTKCPP project
 */
import { Reader, Message, LLRPEnum, LLRPCore } from "../index";

const ROSPEC = {
    ROSpecID: 123,
    Priority: 0,
    CurrentState: "Disabled",
    ROBoundarySpec: {
        ROSpecStartTrigger: {
            ROSpecStartTriggerType: "Null"
        },
        ROSpecStopTrigger: {
            ROSpecStopTriggerType: "Null",
            DurationTriggerValue: 0
        }
    },
    AISpec: {
        AntennaIDs: [0],
        AISpecStopTrigger: {
            AISpecStopTriggerType: "Duration",
            DurationTrigger: 5000
        },
        InventoryParameterSpec: {
            InventoryParameterSpecID: 1234,
            ProtocolID: "EPCGlobalClass1Gen2"
        }
    },
    ROReportSpec: {
        ROReportTrigger: "Upon_N_Tags_Or_End_Of_ROSpec",
        N: 0,
        TagReportContentSelector: {
            EnableROSpecID: false,
            EnableSpecIndex: false,
            EnableInventoryParameterSpecID: false,
            EnableAntennaID: false,
            EnableChannelIndex: false,
            EnablePeakRSSI: false,
            EnableFirstSeenTimestamp: false,
            EnableLastSeenTimestamp: false,
            EnableTagSeenCount: false,
            EnableAccessSpecID: false
        }
    }
};

class Main {
    reader: Reader;

    constructor(reader: Reader) {
        this.reader = reader;

        reader.on('connect', () => { });
        reader.on('disconnect', () => { });
        reader.on('error', () => { });

        reader.on('KEEPALIVE', () => {
            reader.send(new LLRPCore.KEEPALIVE_ACK());
        });

        reader.on('RO_ACCESS_REPORT',);
    }

    async checkConnectionStatus() {
        /** wait for a READER_EVENT_NOTIFICATION message */
        let msg = await this.reader.recv(10000);
        if (msg.MessageType != "READER_EVENT_NOTIFICATION") {
            throw new Error(`connection status check failed -1`);
        }
        let event = msg.getConnectionAttemptEvent();
        if (!event) {
            throw new Error(`connection status check failed -2`);
        }
        let status = event.getStatus();
        if (status != LLRPEnum.ConnectionAttemptStatusType.Success) {
            throw new Error(`connection status check failed ${status.toString()}`);
        }
        return;
    }

    async scrubConfiguration() {
        await this.deleteAllROSpecs();
        await this.resetToFactoryDefaults();
    }

    async addROSpec() {
        return this.reader.transact((new Message({
            MessageType: "ADD_ROSPEC"
        })).addROSpec(ROSPEC));
    }

    async enableROSpec() {
        return this.reader.transact((new Message({
            MessageType: "ENABLE_ROSPEC",
            MessageBody: {
                ROSpecID: ROSPEC.ROSpecID
            }
        })));
    }

    async startROSpec() {
        return this.reader.transact(
            new LLRPCore.START_ROSPEC({
                ROSpecID: ROSPEC.ROSpecID
            })
        );
    }

    async deleteAllROSpecs() {
        return this.reader.transact(
            new LLRPCore.DELETE_ROSPEC({
                ROSpecID: 0 // all
            })
        );
    }

    async resetToFactoryDefaults() {
        return this.reader.transact(
            new LLRPCore.SET_READER_CONFIG({
                ResetToFactoryDefaults: true
            })
        );
    }

    async awaitAndPrintReport() {
        let msg = null;
        while (msg = await this.reader.recv(-1)) {
            if (msg.MessageType == "RO_ACCESS_REPORT") {
                let report = new LLRPCore.RO_ACCESS_REPORT(msg);
                let tagReportDataList = report.listTagReportData();
                for (let tagReportData of tagReportDataList) {
                    let epc = tagReportData.getEPCParameter();
                    console.log(`Tag ID: ${epc.td.name == "EPCData" ?
                        epc.getEPCData().getEPC() :
                        epc.getEPC_96().getEPC()}`);
                }
            }
        }
    }

    async run() {
        try {
            /** start */
            await this.reader.connect();
            /** connected */
            await this.checkConnectionStatus();
            /** received LLRP notification. Do factory reset */
            await this.scrubConfiguration();
            /** add ROSpec */
            await this.addROSpec();
            /** enable and start the added ROSpec */
            await this.enableROSpec();
            await this.startROSpec();

            /** print tags */
            await this.awaitAndPrintReport();

            /** cleanup */
            await this.scrubConfiguration();

        } catch (err) {
            console.error(err.toString());
            await this.reader.disconnect();
            process.exit(1);
        }
    }
}


(new Main(
    new Reader({
        host: "192.168.7.2",
        port: 5084
    })
)).run();
