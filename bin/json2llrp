#!/usr/bin/env node

const JSONbig = require('json-bigint');
const debug = require('debug')('llrpjs:json2llrp');
const yargs = require('yargs');
const fs = require('fs');
const Encoder = require('../src/encoder');


const argv = yargs.command('$0 <input>', 'convert llrp json to bin', yargs=>{
        yargs.positional('input', {
            describe: 'path to llrp JSON file',
            type: 'string'
        }).demandOption(['input']);
    })
    .option('output', {
        alias: 'o',
        description: 'path to output binary file',
        type: 'string'
    })
    .option('iso8601fp', {
        alias: 'i',
        description: 'enables datetime microsecond full precision (default: true)',
        type: 'boolean',
        default: true
    })
    .help().alias('help', 'h')
    .argv;


(()=>{
    let json = fs.readFileSync(argv.input, 'utf-8');
    let encoder = new Encoder({
        bufSize: 8192*1024,
        iso8601FullPrecision: argv.iso8601fp
    });           // to pass all dx101 tests (dx101_c requries very large buffer size for each message)

    json = JSONbig.parse(json);

    let result = [];
    if (Array.isArray(json)) {
        for (let i in json) {
            let msg = json[i];
            debug(JSONbig.stringify(msg, null, 2));
            let buf = encoder.message(msg);
            debug(buf.toString('hex').match(/../g).join(' '));
            result.push(buf);
        }
    } else {
        debug(JSONbig.stringify(json, null, 2));
        let buf = encoder.message(json);
        debug(buf.toString('hex').match(/../g).join(' '));        
        result.push(buf);
    }

    result = Buffer.concat(result);

    if (argv.output) {
        fs.writeFileSync(argv.output, result);
    } else {
        process.stdout.write(result);
    }
})();
